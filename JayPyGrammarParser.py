# Generated from C:/Javalib/test/JayPyGrammar.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,97,788,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,1,0,5,0,122,8,0,10,0,12,0,125,9,0,1,0,1,0,1,0,1,0,1,0,1,0,5,
        0,133,8,0,10,0,12,0,136,9,0,1,0,1,0,5,0,140,8,0,10,0,12,0,143,9,
        0,1,0,1,0,1,1,1,1,3,1,149,8,1,1,2,1,2,1,2,1,2,1,2,5,2,156,8,2,10,
        2,12,2,159,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,3,2,174,8,2,1,3,1,3,3,3,178,8,3,1,4,1,4,3,4,182,8,4,1,5,1,5,3,
        5,186,8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,5,7,195,8,7,10,7,12,7,198,
        9,7,1,8,1,8,1,8,3,8,203,8,8,1,9,1,9,1,9,5,9,208,8,9,10,9,12,9,211,
        9,9,1,10,1,10,3,10,215,8,10,1,11,1,11,1,11,1,11,5,11,221,8,11,10,
        11,12,11,224,9,11,1,11,3,11,227,8,11,3,11,229,8,11,1,11,1,11,1,12,
        1,12,1,12,5,12,236,8,12,10,12,12,12,239,9,12,1,13,1,13,3,13,243,
        8,13,1,13,1,13,1,13,3,13,248,8,13,1,13,3,13,251,8,13,3,13,253,8,
        13,1,13,1,13,1,14,1,14,1,14,1,14,5,14,261,8,14,10,14,12,14,264,9,
        14,1,15,1,15,1,15,5,15,269,8,15,10,15,12,15,272,9,15,1,15,1,15,3,
        15,276,8,15,1,15,3,15,279,8,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,5,18,291,8,18,10,18,12,18,294,9,18,1,19,1,19,1,19,
        1,19,1,19,1,19,3,19,302,8,19,1,20,1,20,1,21,1,21,1,21,5,21,309,8,
        21,10,21,12,21,312,9,21,1,22,1,22,1,22,1,22,1,23,1,23,3,23,320,8,
        23,1,24,1,24,1,24,1,24,5,24,326,8,24,10,24,12,24,329,9,24,3,24,331,
        8,24,1,24,3,24,334,8,24,1,24,1,24,1,25,1,25,5,25,340,8,25,10,25,
        12,25,343,9,25,1,25,1,25,1,26,1,26,1,26,1,26,3,26,351,8,26,1,27,
        1,27,1,27,1,27,3,27,357,8,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,
        1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,3,32,382,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        5,32,404,8,32,10,32,12,32,407,9,32,1,32,5,32,410,8,32,10,32,12,32,
        413,9,32,1,32,1,32,1,32,1,32,3,32,419,8,32,1,32,1,32,1,32,3,32,424,
        8,32,1,32,1,32,1,32,3,32,429,8,32,1,32,1,32,1,32,1,32,1,32,1,32,
        3,32,437,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,3,32,454,8,32,1,33,4,33,457,8,33,11,33,
        12,33,458,1,33,4,33,462,8,33,11,33,12,33,463,1,34,1,34,1,34,1,34,
        1,34,3,34,471,8,34,1,34,1,34,1,34,1,34,3,34,477,8,34,1,35,1,35,3,
        35,481,8,35,1,35,1,35,3,35,485,8,35,1,35,1,35,3,35,489,8,35,3,35,
        491,8,35,1,36,1,36,1,37,1,37,3,37,497,8,37,1,37,1,37,1,37,1,37,1,
        38,1,38,1,38,1,38,1,39,1,39,1,39,5,39,510,8,39,10,39,12,39,513,9,
        39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,3,41,523,8,41,1,41,1,
        41,1,41,1,41,1,41,1,41,1,41,3,41,532,8,41,1,41,1,41,1,41,1,41,1,
        41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,548,8,41,1,
        41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
        41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
        41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
        41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,596,8,41,1,41,1,41,3,41,600,
        8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,609,8,41,5,41,611,8,
        41,10,41,12,41,614,9,41,1,42,1,42,1,42,3,42,619,8,42,1,42,1,42,1,
        42,1,42,1,42,5,42,626,8,42,10,42,12,42,629,9,42,1,42,1,42,1,42,1,
        42,3,42,635,8,42,1,42,3,42,638,8,42,1,43,1,43,1,43,1,43,1,44,1,44,
        3,44,646,8,44,1,45,1,45,1,45,5,45,651,8,45,10,45,12,45,654,9,45,
        1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,3,48,
        668,8,48,1,49,1,49,1,49,1,49,5,49,674,8,49,10,49,12,49,677,9,49,
        1,49,1,49,1,50,1,50,1,50,1,50,3,50,685,8,50,1,50,1,50,1,50,1,50,
        1,50,3,50,692,8,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        5,51,703,8,51,10,51,12,51,706,9,51,3,51,708,8,51,1,51,1,51,1,51,
        5,51,713,8,51,10,51,12,51,716,9,51,1,52,1,52,5,52,720,8,52,10,52,
        12,52,723,9,52,3,52,725,8,52,1,53,1,53,4,53,729,8,53,11,53,12,53,
        730,1,53,1,53,1,53,1,53,1,53,4,53,738,8,53,11,53,12,53,739,1,53,
        1,53,5,53,744,8,53,10,53,12,53,747,9,53,3,53,749,8,53,1,54,1,54,
        1,55,1,55,1,55,1,55,5,55,757,8,55,10,55,12,55,760,9,55,1,55,1,55,
        1,56,1,56,3,56,766,8,56,1,56,1,56,1,57,1,57,1,58,1,58,1,58,5,58,
        775,8,58,10,58,12,58,778,9,58,1,59,1,59,1,59,5,59,783,8,59,10,59,
        12,59,786,9,59,1,59,0,2,82,102,60,0,2,4,6,8,10,12,14,16,18,20,22,
        24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
        68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,0,10,2,0,38,38,97,97,2,0,62,63,72,75,3,0,
        3,4,76,77,81,81,1,0,74,75,2,0,60,61,67,68,2,0,66,66,69,69,2,0,59,
        59,82,92,1,0,72,73,2,0,65,65,93,93,9,0,9,9,11,11,13,13,20,20,22,
        22,28,29,31,31,34,34,37,37,858,0,123,1,0,0,0,2,148,1,0,0,0,4,173,
        1,0,0,0,6,177,1,0,0,0,8,181,1,0,0,0,10,185,1,0,0,0,12,187,1,0,0,
        0,14,191,1,0,0,0,16,199,1,0,0,0,18,204,1,0,0,0,20,214,1,0,0,0,22,
        216,1,0,0,0,24,232,1,0,0,0,26,240,1,0,0,0,28,256,1,0,0,0,30,278,
        1,0,0,0,32,280,1,0,0,0,34,283,1,0,0,0,36,287,1,0,0,0,38,301,1,0,
        0,0,40,303,1,0,0,0,42,305,1,0,0,0,44,313,1,0,0,0,46,319,1,0,0,0,
        48,321,1,0,0,0,50,337,1,0,0,0,52,350,1,0,0,0,54,352,1,0,0,0,56,358,
        1,0,0,0,58,360,1,0,0,0,60,362,1,0,0,0,62,368,1,0,0,0,64,453,1,0,
        0,0,66,456,1,0,0,0,68,476,1,0,0,0,70,490,1,0,0,0,72,492,1,0,0,0,
        74,496,1,0,0,0,76,502,1,0,0,0,78,506,1,0,0,0,80,514,1,0,0,0,82,531,
        1,0,0,0,84,637,1,0,0,0,86,639,1,0,0,0,88,645,1,0,0,0,90,647,1,0,
        0,0,92,655,1,0,0,0,94,658,1,0,0,0,96,667,1,0,0,0,98,669,1,0,0,0,
        100,691,1,0,0,0,102,707,1,0,0,0,104,724,1,0,0,0,106,748,1,0,0,0,
        108,750,1,0,0,0,110,752,1,0,0,0,112,763,1,0,0,0,114,769,1,0,0,0,
        116,771,1,0,0,0,118,779,1,0,0,0,120,122,3,4,2,0,121,120,1,0,0,0,
        122,125,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,126,1,0,0,0,
        125,123,1,0,0,0,126,127,5,28,0,0,127,128,5,1,0,0,128,129,5,50,0,
        0,129,130,5,51,0,0,130,134,5,52,0,0,131,133,3,64,32,0,132,131,1,
        0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,137,1,
        0,0,0,136,134,1,0,0,0,137,141,5,53,0,0,138,140,3,4,2,0,139,138,1,
        0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,144,1,
        0,0,0,143,141,1,0,0,0,144,145,5,0,0,1,145,1,1,0,0,0,146,149,3,4,
        2,0,147,149,3,12,6,0,148,146,1,0,0,0,148,147,1,0,0,0,149,3,1,0,0,
        0,150,151,3,8,4,0,151,152,3,56,28,0,152,157,3,26,13,0,153,154,5,
        54,0,0,154,156,5,55,0,0,155,153,1,0,0,0,156,159,1,0,0,0,157,155,
        1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,0,159,157,1,0,0,0,160,161,
        3,6,3,0,161,174,1,0,0,0,162,163,5,34,0,0,163,164,3,56,28,0,164,165,
        3,26,13,0,165,166,3,6,3,0,166,174,1,0,0,0,167,168,3,8,4,0,168,169,
        3,56,28,0,169,170,5,50,0,0,170,171,5,51,0,0,171,172,3,6,3,0,172,
        174,1,0,0,0,173,150,1,0,0,0,173,162,1,0,0,0,173,167,1,0,0,0,174,
        5,1,0,0,0,175,178,3,50,25,0,176,178,5,56,0,0,177,175,1,0,0,0,177,
        176,1,0,0,0,178,7,1,0,0,0,179,182,3,118,59,0,180,182,5,34,0,0,181,
        179,1,0,0,0,181,180,1,0,0,0,182,9,1,0,0,0,183,186,3,118,59,0,184,
        186,5,38,0,0,185,183,1,0,0,0,185,184,1,0,0,0,186,11,1,0,0,0,187,
        188,3,118,59,0,188,189,3,14,7,0,189,190,5,56,0,0,190,13,1,0,0,0,
        191,196,3,16,8,0,192,193,5,57,0,0,193,195,3,16,8,0,194,192,1,0,0,
        0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,15,1,0,0,0,
        198,196,1,0,0,0,199,202,3,18,9,0,200,201,5,59,0,0,201,203,3,20,10,
        0,202,200,1,0,0,0,202,203,1,0,0,0,203,17,1,0,0,0,204,209,3,56,28,
        0,205,206,5,54,0,0,206,208,5,55,0,0,207,205,1,0,0,0,208,211,1,0,
        0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,19,1,0,0,0,211,209,1,0,0,
        0,212,215,3,22,11,0,213,215,3,82,41,0,214,212,1,0,0,0,214,213,1,
        0,0,0,215,21,1,0,0,0,216,228,5,52,0,0,217,222,3,20,10,0,218,219,
        5,57,0,0,219,221,3,20,10,0,220,218,1,0,0,0,221,224,1,0,0,0,222,220,
        1,0,0,0,222,223,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,225,227,
        5,57,0,0,226,225,1,0,0,0,226,227,1,0,0,0,227,229,1,0,0,0,228,217,
        1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,231,5,53,0,0,231,23,
        1,0,0,0,232,237,3,36,18,0,233,234,5,57,0,0,234,236,3,36,18,0,235,
        233,1,0,0,0,236,239,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,
        25,1,0,0,0,239,237,1,0,0,0,240,252,5,50,0,0,241,243,3,28,14,0,242,
        241,1,0,0,0,242,243,1,0,0,0,243,253,1,0,0,0,244,247,3,28,14,0,245,
        246,5,57,0,0,246,248,3,30,15,0,247,245,1,0,0,0,247,248,1,0,0,0,248,
        253,1,0,0,0,249,251,3,30,15,0,250,249,1,0,0,0,250,251,1,0,0,0,251,
        253,1,0,0,0,252,242,1,0,0,0,252,244,1,0,0,0,252,250,1,0,0,0,253,
        254,1,0,0,0,254,255,5,51,0,0,255,27,1,0,0,0,256,262,3,118,59,0,257,
        258,3,56,28,0,258,259,5,58,0,0,259,261,1,0,0,0,260,257,1,0,0,0,261,
        264,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,29,1,0,0,0,264,262,
        1,0,0,0,265,270,3,32,16,0,266,267,5,57,0,0,267,269,3,32,16,0,268,
        266,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,
        275,1,0,0,0,272,270,1,0,0,0,273,274,5,57,0,0,274,276,3,34,17,0,275,
        273,1,0,0,0,275,276,1,0,0,0,276,279,1,0,0,0,277,279,3,34,17,0,278,
        265,1,0,0,0,278,277,1,0,0,0,279,31,1,0,0,0,280,281,3,118,59,0,281,
        282,3,18,9,0,282,33,1,0,0,0,283,284,3,118,59,0,284,285,5,2,0,0,285,
        286,3,18,9,0,286,35,1,0,0,0,287,292,3,56,28,0,288,289,5,58,0,0,289,
        291,3,56,28,0,290,288,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,
        293,1,0,0,0,293,37,1,0,0,0,294,292,1,0,0,0,295,302,3,40,20,0,296,
        302,5,47,0,0,297,302,5,48,0,0,298,302,5,46,0,0,299,302,5,49,0,0,
        300,302,5,39,0,0,301,295,1,0,0,0,301,296,1,0,0,0,301,297,1,0,0,0,
        301,298,1,0,0,0,301,299,1,0,0,0,301,300,1,0,0,0,302,39,1,0,0,0,303,
        304,5,44,0,0,304,41,1,0,0,0,305,310,3,44,22,0,306,307,5,57,0,0,307,
        309,3,44,22,0,308,306,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,
        311,1,0,0,0,311,43,1,0,0,0,312,310,1,0,0,0,313,314,3,56,28,0,314,
        315,5,59,0,0,315,316,3,46,23,0,316,45,1,0,0,0,317,320,3,82,41,0,
        318,320,3,48,24,0,319,317,1,0,0,0,319,318,1,0,0,0,320,47,1,0,0,0,
        321,330,5,52,0,0,322,327,3,46,23,0,323,324,5,57,0,0,324,326,3,46,
        23,0,325,323,1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,327,328,1,0,
        0,0,328,331,1,0,0,0,329,327,1,0,0,0,330,322,1,0,0,0,330,331,1,0,
        0,0,331,333,1,0,0,0,332,334,5,57,0,0,333,332,1,0,0,0,333,334,1,0,
        0,0,334,335,1,0,0,0,335,336,5,53,0,0,336,49,1,0,0,0,337,341,5,52,
        0,0,338,340,3,52,26,0,339,338,1,0,0,0,340,343,1,0,0,0,341,339,1,
        0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,341,1,0,0,0,344,345,5,
        53,0,0,345,51,1,0,0,0,346,347,3,54,27,0,347,348,5,56,0,0,348,351,
        1,0,0,0,349,351,3,64,32,0,350,346,1,0,0,0,350,349,1,0,0,0,351,53,
        1,0,0,0,352,353,3,10,5,0,353,356,3,56,28,0,354,355,5,59,0,0,355,
        357,3,82,41,0,356,354,1,0,0,0,356,357,1,0,0,0,357,55,1,0,0,0,358,
        359,7,0,0,0,359,57,1,0,0,0,360,361,5,97,0,0,361,59,1,0,0,0,362,363,
        5,18,0,0,363,364,5,50,0,0,364,365,3,82,41,0,365,366,5,51,0,0,366,
        367,5,56,0,0,367,61,1,0,0,0,368,369,5,19,0,0,369,370,5,50,0,0,370,
        371,3,82,41,0,371,372,5,51,0,0,372,373,5,56,0,0,373,63,1,0,0,0,374,
        454,3,50,25,0,375,454,3,2,1,0,376,377,5,24,0,0,377,378,3,76,38,0,
        378,381,3,64,32,0,379,380,5,21,0,0,380,382,3,64,32,0,381,379,1,0,
        0,0,381,382,1,0,0,0,382,454,1,0,0,0,383,384,5,23,0,0,384,385,5,50,
        0,0,385,386,3,70,35,0,386,387,5,51,0,0,387,388,3,64,32,0,388,454,
        1,0,0,0,389,390,5,35,0,0,390,391,3,76,38,0,391,392,3,64,32,0,392,
        454,1,0,0,0,393,394,5,17,0,0,394,395,3,64,32,0,395,396,5,35,0,0,
        396,397,3,76,38,0,397,398,5,56,0,0,398,454,1,0,0,0,399,400,5,33,
        0,0,400,401,3,76,38,0,401,405,5,52,0,0,402,404,3,66,33,0,403,402,
        1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,411,
        1,0,0,0,407,405,1,0,0,0,408,410,3,68,34,0,409,408,1,0,0,0,410,413,
        1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,411,
        1,0,0,0,414,415,5,53,0,0,415,454,1,0,0,0,416,418,5,30,0,0,417,419,
        3,82,41,0,418,417,1,0,0,0,418,419,1,0,0,0,419,420,1,0,0,0,420,454,
        5,56,0,0,421,423,5,10,0,0,422,424,3,56,28,0,423,422,1,0,0,0,423,
        424,1,0,0,0,424,425,1,0,0,0,425,454,5,56,0,0,426,428,5,15,0,0,427,
        429,3,56,28,0,428,427,1,0,0,0,428,429,1,0,0,0,429,430,1,0,0,0,430,
        454,5,56,0,0,431,432,3,82,41,0,432,433,5,56,0,0,433,454,1,0,0,0,
        434,436,3,98,49,0,435,437,5,56,0,0,436,435,1,0,0,0,436,437,1,0,0,
        0,437,454,1,0,0,0,438,439,3,56,28,0,439,440,5,65,0,0,440,441,3,64,
        32,0,441,454,1,0,0,0,442,443,5,23,0,0,443,444,5,50,0,0,444,445,3,
        10,5,0,445,446,3,56,28,0,446,447,5,36,0,0,447,448,3,82,41,0,448,
        449,5,51,0,0,449,450,3,64,32,0,450,454,1,0,0,0,451,454,3,60,30,0,
        452,454,3,62,31,0,453,374,1,0,0,0,453,375,1,0,0,0,453,376,1,0,0,
        0,453,383,1,0,0,0,453,389,1,0,0,0,453,393,1,0,0,0,453,399,1,0,0,
        0,453,416,1,0,0,0,453,421,1,0,0,0,453,426,1,0,0,0,453,431,1,0,0,
        0,453,434,1,0,0,0,453,438,1,0,0,0,453,442,1,0,0,0,453,451,1,0,0,
        0,453,452,1,0,0,0,454,65,1,0,0,0,455,457,3,68,34,0,456,455,1,0,0,
        0,457,458,1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,461,1,0,0,
        0,460,462,3,52,26,0,461,460,1,0,0,0,462,463,1,0,0,0,463,461,1,0,
        0,0,463,464,1,0,0,0,464,67,1,0,0,0,465,470,5,12,0,0,466,471,3,82,
        41,0,467,468,3,118,59,0,468,469,3,56,28,0,469,471,1,0,0,0,470,466,
        1,0,0,0,470,467,1,0,0,0,471,472,1,0,0,0,472,473,5,65,0,0,473,477,
        1,0,0,0,474,475,5,16,0,0,475,477,5,65,0,0,476,465,1,0,0,0,476,474,
        1,0,0,0,477,69,1,0,0,0,478,491,3,74,37,0,479,481,3,72,36,0,480,479,
        1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,484,5,56,0,0,483,485,
        3,82,41,0,484,483,1,0,0,0,484,485,1,0,0,0,485,486,1,0,0,0,486,488,
        5,56,0,0,487,489,3,78,39,0,488,487,1,0,0,0,488,489,1,0,0,0,489,491,
        1,0,0,0,490,478,1,0,0,0,490,480,1,0,0,0,491,71,1,0,0,0,492,493,3,
        54,27,0,493,73,1,0,0,0,494,497,3,118,59,0,495,497,5,38,0,0,496,494,
        1,0,0,0,496,495,1,0,0,0,497,498,1,0,0,0,498,499,3,18,9,0,499,500,
        5,65,0,0,500,501,3,82,41,0,501,75,1,0,0,0,502,503,5,50,0,0,503,504,
        3,82,41,0,504,505,5,51,0,0,505,77,1,0,0,0,506,511,3,82,41,0,507,
        508,5,57,0,0,508,510,3,82,41,0,509,507,1,0,0,0,510,513,1,0,0,0,511,
        509,1,0,0,0,511,512,1,0,0,0,512,79,1,0,0,0,513,511,1,0,0,0,514,515,
        3,56,28,0,515,516,3,112,56,0,516,81,1,0,0,0,517,518,6,41,-1,0,518,
        532,3,96,48,0,519,532,3,80,40,0,520,522,3,118,59,0,521,523,3,110,
        55,0,522,521,1,0,0,0,522,523,1,0,0,0,523,524,1,0,0,0,524,525,3,56,
        28,0,525,532,1,0,0,0,526,532,3,98,49,0,527,528,7,1,0,0,528,532,3,
        82,41,18,529,532,3,38,19,0,530,532,3,86,43,0,531,517,1,0,0,0,531,
        519,1,0,0,0,531,520,1,0,0,0,531,526,1,0,0,0,531,527,1,0,0,0,531,
        529,1,0,0,0,531,530,1,0,0,0,532,612,1,0,0,0,533,534,10,16,0,0,534,
        535,7,2,0,0,535,611,3,82,41,17,536,537,10,15,0,0,537,538,7,3,0,0,
        538,611,3,82,41,16,539,547,10,14,0,0,540,541,5,61,0,0,541,548,5,
        61,0,0,542,543,5,60,0,0,543,544,5,60,0,0,544,548,5,60,0,0,545,546,
        5,60,0,0,546,548,5,60,0,0,547,540,1,0,0,0,547,542,1,0,0,0,547,545,
        1,0,0,0,548,549,1,0,0,0,549,611,3,82,41,15,550,551,10,13,0,0,551,
        552,7,4,0,0,552,611,3,82,41,14,553,554,10,11,0,0,554,555,7,5,0,0,
        555,611,3,82,41,12,556,557,10,10,0,0,557,558,5,78,0,0,558,611,3,
        82,41,11,559,560,10,9,0,0,560,561,5,80,0,0,561,611,3,82,41,10,562,
        563,10,8,0,0,563,564,5,79,0,0,564,611,3,82,41,9,565,566,10,7,0,0,
        566,567,5,5,0,0,567,611,3,82,41,8,568,569,10,6,0,0,569,570,5,6,0,
        0,570,611,3,82,41,7,571,572,10,5,0,0,572,573,5,7,0,0,573,611,3,82,
        41,6,574,575,10,4,0,0,575,576,5,8,0,0,576,611,3,82,41,5,577,578,
        10,3,0,0,578,579,5,64,0,0,579,580,3,82,41,0,580,581,5,65,0,0,581,
        582,3,82,41,3,582,611,1,0,0,0,583,584,10,2,0,0,584,585,7,6,0,0,585,
        611,3,82,41,2,586,587,10,25,0,0,587,588,5,54,0,0,588,589,3,82,41,
        0,589,590,5,55,0,0,590,611,1,0,0,0,591,592,10,24,0,0,592,595,5,58,
        0,0,593,596,3,56,28,0,594,596,3,80,40,0,595,593,1,0,0,0,595,594,
        1,0,0,0,596,611,1,0,0,0,597,599,10,22,0,0,598,600,3,110,55,0,599,
        598,1,0,0,0,599,600,1,0,0,0,600,601,1,0,0,0,601,611,3,56,28,0,602,
        603,10,19,0,0,603,611,7,7,0,0,604,605,10,12,0,0,605,608,5,27,0,0,
        606,609,3,118,59,0,607,609,3,94,47,0,608,606,1,0,0,0,608,607,1,0,
        0,0,609,611,1,0,0,0,610,533,1,0,0,0,610,536,1,0,0,0,610,539,1,0,
        0,0,610,550,1,0,0,0,610,553,1,0,0,0,610,556,1,0,0,0,610,559,1,0,
        0,0,610,562,1,0,0,0,610,565,1,0,0,0,610,568,1,0,0,0,610,571,1,0,
        0,0,610,574,1,0,0,0,610,577,1,0,0,0,610,583,1,0,0,0,610,586,1,0,
        0,0,610,591,1,0,0,0,610,597,1,0,0,0,610,602,1,0,0,0,610,604,1,0,
        0,0,611,614,1,0,0,0,612,610,1,0,0,0,612,613,1,0,0,0,613,83,1,0,0,
        0,614,612,1,0,0,0,615,638,3,56,28,0,616,618,5,50,0,0,617,619,3,30,
        15,0,618,617,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,638,5,51,
        0,0,621,622,5,50,0,0,622,627,3,56,28,0,623,624,5,57,0,0,624,626,
        3,56,28,0,625,623,1,0,0,0,626,629,1,0,0,0,627,625,1,0,0,0,627,628,
        1,0,0,0,628,630,1,0,0,0,629,627,1,0,0,0,630,631,5,51,0,0,631,638,
        1,0,0,0,632,634,5,50,0,0,633,635,3,90,45,0,634,633,1,0,0,0,634,635,
        1,0,0,0,635,636,1,0,0,0,636,638,5,51,0,0,637,615,1,0,0,0,637,616,
        1,0,0,0,637,621,1,0,0,0,637,632,1,0,0,0,638,85,1,0,0,0,639,640,3,
        84,42,0,640,641,5,93,0,0,641,642,3,88,44,0,642,87,1,0,0,0,643,646,
        3,82,41,0,644,646,3,50,25,0,645,643,1,0,0,0,645,644,1,0,0,0,646,
        89,1,0,0,0,647,652,3,92,46,0,648,649,5,57,0,0,649,651,3,92,46,0,
        650,648,1,0,0,0,651,654,1,0,0,0,652,650,1,0,0,0,652,653,1,0,0,0,
        653,91,1,0,0,0,654,652,1,0,0,0,655,656,5,38,0,0,656,657,3,56,28,
        0,657,93,1,0,0,0,658,659,3,118,59,0,659,660,3,56,28,0,660,95,1,0,
        0,0,661,662,5,50,0,0,662,663,3,82,41,0,663,664,5,51,0,0,664,668,
        1,0,0,0,665,668,3,38,19,0,666,668,3,56,28,0,667,661,1,0,0,0,667,
        665,1,0,0,0,667,666,1,0,0,0,668,97,1,0,0,0,669,670,5,33,0,0,670,
        671,3,76,38,0,671,675,5,52,0,0,672,674,3,100,50,0,673,672,1,0,0,
        0,674,677,1,0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,678,1,0,0,
        0,677,675,1,0,0,0,678,679,5,53,0,0,679,99,1,0,0,0,680,684,5,12,0,
        0,681,685,3,78,39,0,682,685,5,49,0,0,683,685,3,102,51,0,684,681,
        1,0,0,0,684,682,1,0,0,0,684,683,1,0,0,0,685,686,1,0,0,0,686,687,
        7,8,0,0,687,692,3,104,52,0,688,689,5,16,0,0,689,690,7,8,0,0,690,
        692,3,104,52,0,691,680,1,0,0,0,691,688,1,0,0,0,692,101,1,0,0,0,693,
        694,6,51,-1,0,694,695,5,50,0,0,695,696,3,102,51,0,696,697,5,51,0,
        0,697,708,1,0,0,0,698,699,3,118,59,0,699,704,3,56,28,0,700,701,5,
        5,0,0,701,703,3,82,41,0,702,700,1,0,0,0,703,706,1,0,0,0,704,702,
        1,0,0,0,704,705,1,0,0,0,705,708,1,0,0,0,706,704,1,0,0,0,707,693,
        1,0,0,0,707,698,1,0,0,0,708,714,1,0,0,0,709,710,10,1,0,0,710,711,
        5,5,0,0,711,713,3,82,41,0,712,709,1,0,0,0,713,716,1,0,0,0,714,712,
        1,0,0,0,714,715,1,0,0,0,715,103,1,0,0,0,716,714,1,0,0,0,717,725,
        3,50,25,0,718,720,3,52,26,0,719,718,1,0,0,0,720,723,1,0,0,0,721,
        719,1,0,0,0,721,722,1,0,0,0,722,725,1,0,0,0,723,721,1,0,0,0,724,
        717,1,0,0,0,724,721,1,0,0,0,725,105,1,0,0,0,726,727,5,54,0,0,727,
        729,5,55,0,0,728,726,1,0,0,0,729,730,1,0,0,0,730,728,1,0,0,0,730,
        731,1,0,0,0,731,732,1,0,0,0,732,749,3,22,11,0,733,734,5,54,0,0,734,
        735,3,82,41,0,735,736,5,55,0,0,736,738,1,0,0,0,737,733,1,0,0,0,738,
        739,1,0,0,0,739,737,1,0,0,0,739,740,1,0,0,0,740,745,1,0,0,0,741,
        742,5,54,0,0,742,744,5,55,0,0,743,741,1,0,0,0,744,747,1,0,0,0,745,
        743,1,0,0,0,745,746,1,0,0,0,746,749,1,0,0,0,747,745,1,0,0,0,748,
        728,1,0,0,0,748,737,1,0,0,0,749,107,1,0,0,0,750,751,7,9,0,0,751,
        109,1,0,0,0,752,753,5,61,0,0,753,758,3,114,57,0,754,755,5,57,0,0,
        755,757,3,114,57,0,756,754,1,0,0,0,757,760,1,0,0,0,758,756,1,0,0,
        0,758,759,1,0,0,0,759,761,1,0,0,0,760,758,1,0,0,0,761,762,5,60,0,
        0,762,111,1,0,0,0,763,765,5,50,0,0,764,766,3,78,39,0,765,764,1,0,
        0,0,765,766,1,0,0,0,766,767,1,0,0,0,767,768,5,51,0,0,768,113,1,0,
        0,0,769,770,3,118,59,0,770,115,1,0,0,0,771,776,3,118,59,0,772,773,
        5,57,0,0,773,775,3,118,59,0,774,772,1,0,0,0,775,778,1,0,0,0,776,
        774,1,0,0,0,776,777,1,0,0,0,777,117,1,0,0,0,778,776,1,0,0,0,779,
        784,3,108,54,0,780,781,5,54,0,0,781,783,5,55,0,0,782,780,1,0,0,0,
        783,786,1,0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,119,1,0,0,0,
        786,784,1,0,0,0,84,123,134,141,148,157,173,177,181,185,196,202,209,
        214,222,226,228,237,242,247,250,252,262,270,275,278,292,301,310,
        319,327,330,333,341,350,356,381,405,411,418,423,428,436,453,458,
        463,470,476,480,484,488,490,496,511,522,531,547,595,599,608,610,
        612,618,627,634,637,645,652,667,675,684,691,704,707,714,721,724,
        730,739,745,748,758,765,776,784
    ]

class JayPyGrammarParser ( Parser ):

    grammarFileName = "JayPyGrammar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'main'", "'...'", "'**'", "'DOT'", "'&&'", 
                     "'||'", "'OR'", "'AND'", "'boolean'", "'break'", "'byte'", 
                     "'case'", "'char'", "'const'", "'continue'", "'default'", 
                     "'do'", "'print'", "'println'", "'double'", "'else'", 
                     "'float'", "'for'", "'if'", "'goto'", "'import'", "'instanceof'", 
                     "'int'", "'long'", "'return'", "'short'", "'static'", 
                     "'switch'", "'void'", "'while'", "'in'", "'String'", 
                     "'var'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'null'", "'('", "')'", "'{'", 
                     "'}'", "'['", "']'", "';'", "','", "'.'", "'='", "'>'", 
                     "'<'", "'!'", "'~'", "'?'", "':'", "'=='", "'<='", 
                     "'>='", "'!='", "<INVALID>", "<INVALID>", "'++'", "'--'", 
                     "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", 
                     "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
                     "'%='", "'<<='", "'>>='", "'>>>='", "'->'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "BOOLEAN", "BREAK", "BYTE", "CASE", "CHAR", 
                      "CONST", "CONTINUE", "DEFAULT", "DO", "PRINT", "PRINTLN", 
                      "DOUBLE", "ELSE", "FLOAT", "FOR", "IF", "GOTO", "IMPORT", 
                      "INSTANCEOF", "INT", "LONG", "RETURN", "SHORT", "STATIC", 
                      "SWITCH", "VOID", "WHILE", "IN", "STRING", "VAR", 
                      "INT_LITERAL", "DECIMAL_LITERAL_FOR_ARRAY", "DECIMAL_LITERAL", 
                      "HEX_LITERAL", "BINARY_LITERAL", "FLOAT_LITERAL", 
                      "HEX_FLOAT_LITERAL", "BOOL_LITERAL", "CHAR_LITERAL", 
                      "STRING_LITERAL", "NULL_LITERAL", "LPAREN", "RPAREN", 
                      "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
                      "DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", 
                      "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", 
                      "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", 
                      "BITOR", "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", 
                      "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
                      "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
                      "URSHIFT_ASSIGN", "ARROW", "WS", "COMMENT", "LINE_COMMENT", 
                      "IDENTIFIER" ]

    RULE_program = 0
    RULE_memberDeclaration = 1
    RULE_methodDeclaration = 2
    RULE_methodBody = 3
    RULE_typeTypeOrVoid = 4
    RULE_typeTypeOrVar = 5
    RULE_fieldDeclaration = 6
    RULE_variableDeclarators = 7
    RULE_variableDeclarator = 8
    RULE_variableDeclaratorId = 9
    RULE_variableInitializer = 10
    RULE_arrayInitializer = 11
    RULE_qualifiedNameList = 12
    RULE_formalParameters = 13
    RULE_receiverParameter = 14
    RULE_formalParameterList = 15
    RULE_formalParameter = 16
    RULE_lastFormalParameter = 17
    RULE_qualifiedName = 18
    RULE_literal = 19
    RULE_floatLiteral = 20
    RULE_elementValuePairs = 21
    RULE_elementValuePair = 22
    RULE_elementValue = 23
    RULE_elementValueArrayInitializer = 24
    RULE_block = 25
    RULE_blockStatement = 26
    RULE_localVariableDeclaration = 27
    RULE_identifier = 28
    RULE_typeIdentifier = 29
    RULE_printStatement = 30
    RULE_printlnStatement = 31
    RULE_statement = 32
    RULE_switchBlockStatementGroup = 33
    RULE_switchLabel = 34
    RULE_forControl = 35
    RULE_forInit = 36
    RULE_enhancedForControl = 37
    RULE_parExpression = 38
    RULE_expressionList = 39
    RULE_methodCall = 40
    RULE_expression = 41
    RULE_lambdaParameters = 42
    RULE_lambdaExpression = 43
    RULE_lambdaBody = 44
    RULE_lambdaLVTIList = 45
    RULE_lambdaLVTIParameter = 46
    RULE_pattern = 47
    RULE_primary = 48
    RULE_switchExpression = 49
    RULE_switchLabeledRule = 50
    RULE_guardedPattern = 51
    RULE_switchRuleOutcome = 52
    RULE_arrayCreatorRest = 53
    RULE_primitiveType = 54
    RULE_typeArguments = 55
    RULE_arguments = 56
    RULE_typeArgument = 57
    RULE_typeList = 58
    RULE_typeType = 59

    ruleNames =  [ "program", "memberDeclaration", "methodDeclaration", 
                   "methodBody", "typeTypeOrVoid", "typeTypeOrVar", "fieldDeclaration", 
                   "variableDeclarators", "variableDeclarator", "variableDeclaratorId", 
                   "variableInitializer", "arrayInitializer", "qualifiedNameList", 
                   "formalParameters", "receiverParameter", "formalParameterList", 
                   "formalParameter", "lastFormalParameter", "qualifiedName", 
                   "literal", "floatLiteral", "elementValuePairs", "elementValuePair", 
                   "elementValue", "elementValueArrayInitializer", "block", 
                   "blockStatement", "localVariableDeclaration", "identifier", 
                   "typeIdentifier", "printStatement", "printlnStatement", 
                   "statement", "switchBlockStatementGroup", "switchLabel", 
                   "forControl", "forInit", "enhancedForControl", "parExpression", 
                   "expressionList", "methodCall", "expression", "lambdaParameters", 
                   "lambdaExpression", "lambdaBody", "lambdaLVTIList", "lambdaLVTIParameter", 
                   "pattern", "primary", "switchExpression", "switchLabeledRule", 
                   "guardedPattern", "switchRuleOutcome", "arrayCreatorRest", 
                   "primitiveType", "typeArguments", "arguments", "typeArgument", 
                   "typeList", "typeType" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    BOOLEAN=9
    BREAK=10
    BYTE=11
    CASE=12
    CHAR=13
    CONST=14
    CONTINUE=15
    DEFAULT=16
    DO=17
    PRINT=18
    PRINTLN=19
    DOUBLE=20
    ELSE=21
    FLOAT=22
    FOR=23
    IF=24
    GOTO=25
    IMPORT=26
    INSTANCEOF=27
    INT=28
    LONG=29
    RETURN=30
    SHORT=31
    STATIC=32
    SWITCH=33
    VOID=34
    WHILE=35
    IN=36
    STRING=37
    VAR=38
    INT_LITERAL=39
    DECIMAL_LITERAL_FOR_ARRAY=40
    DECIMAL_LITERAL=41
    HEX_LITERAL=42
    BINARY_LITERAL=43
    FLOAT_LITERAL=44
    HEX_FLOAT_LITERAL=45
    BOOL_LITERAL=46
    CHAR_LITERAL=47
    STRING_LITERAL=48
    NULL_LITERAL=49
    LPAREN=50
    RPAREN=51
    LBRACE=52
    RBRACE=53
    LBRACK=54
    RBRACK=55
    SEMI=56
    COMMA=57
    DOT=58
    ASSIGN=59
    GT=60
    LT=61
    BANG=62
    TILDE=63
    QUESTION=64
    COLON=65
    EQUAL=66
    LE=67
    GE=68
    NOTEQUAL=69
    AND=70
    OR=71
    INC=72
    DEC=73
    ADD=74
    SUB=75
    MUL=76
    DIV=77
    BITAND=78
    BITOR=79
    CARET=80
    MOD=81
    ADD_ASSIGN=82
    SUB_ASSIGN=83
    MUL_ASSIGN=84
    DIV_ASSIGN=85
    AND_ASSIGN=86
    OR_ASSIGN=87
    XOR_ASSIGN=88
    MOD_ASSIGN=89
    LSHIFT_ASSIGN=90
    RSHIFT_ASSIGN=91
    URSHIFT_ASSIGN=92
    ARROW=93
    WS=94
    COMMENT=95
    LINE_COMMENT=96
    IDENTIFIER=97

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(JayPyGrammarParser.INT, 0)

        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def LBRACE(self):
            return self.getToken(JayPyGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JayPyGrammarParser.RBRACE, 0)

        def EOF(self):
            return self.getToken(JayPyGrammarParser.EOF, 0)

        def methodDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.MethodDeclarationContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.MethodDeclarationContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.StatementContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.StatementContext,i)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = JayPyGrammarParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 123
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 120
                    self.methodDeclaration() 
                self.state = 125
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 126
            self.match(JayPyGrammarParser.INT)
            self.state = 127
            self.match(JayPyGrammarParser.T__0)
            self.state = 128
            self.match(JayPyGrammarParser.LPAREN)
            self.state = 129
            self.match(JayPyGrammarParser.RPAREN)
            self.state = 130
            self.match(JayPyGrammarParser.LBRACE)
            self.state = 134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4604982369284346368) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 33554447) != 0):
                self.state = 131
                self.statement()
                self.state = 136
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 137
            self.match(JayPyGrammarParser.RBRACE)
            self.state = 141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 157576866304) != 0):
                self.state = 138
                self.methodDeclaration()
                self.state = 143
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 144
            self.match(JayPyGrammarParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodDeclaration(self):
            return self.getTypedRuleContext(JayPyGrammarParser.MethodDeclarationContext,0)


        def fieldDeclaration(self):
            return self.getTypedRuleContext(JayPyGrammarParser.FieldDeclarationContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_memberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration" ):
                listener.enterMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration" ):
                listener.exitMemberDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclaration" ):
                return visitor.visitMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def memberDeclaration(self):

        localctx = JayPyGrammarParser.MemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_memberDeclaration)
        try:
            self.state = 148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 146
                self.methodDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 147
                self.fieldDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeOrVoidContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JayPyGrammarParser.FormalParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JayPyGrammarParser.MethodBodyContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.LBRACK)
            else:
                return self.getToken(JayPyGrammarParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.RBRACK)
            else:
                return self.getToken(JayPyGrammarParser.RBRACK, i)

        def VOID(self):
            return self.getToken(JayPyGrammarParser.VOID, 0)

        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodDeclaration" ):
                return visitor.visitMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def methodDeclaration(self):

        localctx = JayPyGrammarParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 173
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 150
                self.typeTypeOrVoid()
                self.state = 151
                self.identifier()
                self.state = 152
                self.formalParameters()
                self.state = 157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==54:
                    self.state = 153
                    self.match(JayPyGrammarParser.LBRACK)
                    self.state = 154
                    self.match(JayPyGrammarParser.RBRACK)
                    self.state = 159
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 160
                self.methodBody()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 162
                self.match(JayPyGrammarParser.VOID)
                self.state = 163
                self.identifier()
                self.state = 164
                self.formalParameters()
                self.state = 165
                self.methodBody()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 167
                self.typeTypeOrVoid()
                self.state = 168
                self.identifier()
                self.state = 169
                self.match(JayPyGrammarParser.LPAREN)
                self.state = 170
                self.match(JayPyGrammarParser.RPAREN)
                self.state = 171
                self.methodBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JayPyGrammarParser.BlockContext,0)


        def SEMI(self):
            return self.getToken(JayPyGrammarParser.SEMI, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodBody" ):
                return visitor.visitMethodBody(self)
            else:
                return visitor.visitChildren(self)




    def methodBody(self):

        localctx = JayPyGrammarParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_methodBody)
        try:
            self.state = 177
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 175
                self.block()
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 176
                self.match(JayPyGrammarParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeOrVoidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def VOID(self):
            return self.getToken(JayPyGrammarParser.VOID, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_typeTypeOrVoid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTypeOrVoid" ):
                listener.enterTypeTypeOrVoid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTypeOrVoid" ):
                listener.exitTypeTypeOrVoid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeTypeOrVoid" ):
                return visitor.visitTypeTypeOrVoid(self)
            else:
                return visitor.visitChildren(self)




    def typeTypeOrVoid(self):

        localctx = JayPyGrammarParser.TypeTypeOrVoidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_typeTypeOrVoid)
        try:
            self.state = 181
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 179
                self.typeType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 180
                self.match(JayPyGrammarParser.VOID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeOrVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def VAR(self):
            return self.getToken(JayPyGrammarParser.VAR, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_typeTypeOrVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTypeOrVar" ):
                listener.enterTypeTypeOrVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTypeOrVar" ):
                listener.exitTypeTypeOrVar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeTypeOrVar" ):
                return visitor.visitTypeTypeOrVar(self)
            else:
                return visitor.visitChildren(self)




    def typeTypeOrVar(self):

        localctx = JayPyGrammarParser.TypeTypeOrVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_typeTypeOrVar)
        try:
            self.state = 185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 11, 13, 20, 22, 28, 29, 31, 34, 37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 183
                self.typeType()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 184
                self.match(JayPyGrammarParser.VAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JayPyGrammarParser.VariableDeclaratorsContext,0)


        def SEMI(self):
            return self.getToken(JayPyGrammarParser.SEMI, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDeclaration" ):
                return visitor.visitFieldDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def fieldDeclaration(self):

        localctx = JayPyGrammarParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_fieldDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self.typeType()
            self.state = 188
            self.variableDeclarators()
            self.state = 189
            self.match(JayPyGrammarParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.VariableDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_variableDeclarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarators" ):
                listener.enterVariableDeclarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarators" ):
                listener.exitVariableDeclarators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarators" ):
                return visitor.visitVariableDeclarators(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarators(self):

        localctx = JayPyGrammarParser.VariableDeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_variableDeclarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            self.variableDeclarator()
            self.state = 196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 192
                self.match(JayPyGrammarParser.COMMA)
                self.state = 193
                self.variableDeclarator()
                self.state = 198
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JayPyGrammarParser.VariableDeclaratorIdContext,0)


        def ASSIGN(self):
            return self.getToken(JayPyGrammarParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JayPyGrammarParser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_variableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarator" ):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarator" ):
                listener.exitVariableDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarator" ):
                return visitor.visitVariableDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarator(self):

        localctx = JayPyGrammarParser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_variableDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self.variableDeclaratorId()
            self.state = 202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 200
                self.match(JayPyGrammarParser.ASSIGN)
                self.state = 201
                self.variableInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.LBRACK)
            else:
                return self.getToken(JayPyGrammarParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.RBRACK)
            else:
                return self.getToken(JayPyGrammarParser.RBRACK, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_variableDeclaratorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorId" ):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorId" ):
                listener.exitVariableDeclaratorId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaratorId" ):
                return visitor.visitVariableDeclaratorId(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaratorId(self):

        localctx = JayPyGrammarParser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_variableDeclaratorId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.identifier()
            self.state = 209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==54:
                self.state = 205
                self.match(JayPyGrammarParser.LBRACK)
                self.state = 206
                self.match(JayPyGrammarParser.RBRACK)
                self.state = 211
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ArrayInitializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableInitializer" ):
                return visitor.visitVariableInitializer(self)
            else:
                return visitor.visitChildren(self)




    def variableInitializer(self):

        localctx = JayPyGrammarParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_variableInitializer)
        try:
            self.state = 214
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 212
                self.arrayInitializer()
                pass
            elif token in [9, 11, 13, 20, 22, 28, 29, 31, 33, 34, 37, 38, 39, 44, 46, 47, 48, 49, 50, 62, 63, 72, 73, 74, 75, 97]:
                self.enterOuterAlt(localctx, 2)
                self.state = 213
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JayPyGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JayPyGrammarParser.RBRACE, 0)

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.VariableInitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayInitializer" ):
                return visitor.visitArrayInitializer(self)
            else:
                return visitor.visitChildren(self)




    def arrayInitializer(self):

        localctx = JayPyGrammarParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            self.match(JayPyGrammarParser.LBRACE)
            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4604982404743943680) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 33554447) != 0):
                self.state = 217
                self.variableInitializer()
                self.state = 222
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 218
                        self.match(JayPyGrammarParser.COMMA)
                        self.state = 219
                        self.variableInitializer() 
                    self.state = 224
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

                self.state = 226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 225
                    self.match(JayPyGrammarParser.COMMA)




            self.state = 230
            self.match(JayPyGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.QualifiedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedNameList" ):
                return visitor.visitQualifiedNameList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedNameList(self):

        localctx = JayPyGrammarParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.qualifiedName()
            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 233
                self.match(JayPyGrammarParser.COMMA)
                self.state = 234
                self.qualifiedName()
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def receiverParameter(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ReceiverParameterContext,0)


        def COMMA(self):
            return self.getToken(JayPyGrammarParser.COMMA, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JayPyGrammarParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_formalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameters" ):
                listener.enterFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameters" ):
                listener.exitFormalParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameters" ):
                return visitor.visitFormalParameters(self)
            else:
                return visitor.visitChildren(self)




    def formalParameters(self):

        localctx = JayPyGrammarParser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_formalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(JayPyGrammarParser.LPAREN)
            self.state = 252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 157576866304) != 0):
                    self.state = 241
                    self.receiverParameter()


                pass

            elif la_ == 2:
                self.state = 244
                self.receiverParameter()
                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 245
                    self.match(JayPyGrammarParser.COMMA)
                    self.state = 246
                    self.formalParameterList()


                pass

            elif la_ == 3:
                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 157576866304) != 0):
                    self.state = 249
                    self.formalParameterList()


                pass


            self.state = 254
            self.match(JayPyGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.DOT)
            else:
                return self.getToken(JayPyGrammarParser.DOT, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_receiverParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiverParameter" ):
                listener.enterReceiverParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiverParameter" ):
                listener.exitReceiverParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiverParameter" ):
                return visitor.visitReceiverParameter(self)
            else:
                return visitor.visitChildren(self)




    def receiverParameter(self):

        localctx = JayPyGrammarParser.ReceiverParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_receiverParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.typeType()
            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==38 or _la==97:
                self.state = 257
                self.identifier()
                self.state = 258
                self.match(JayPyGrammarParser.DOT)
                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.FormalParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def lastFormalParameter(self):
            return self.getTypedRuleContext(JayPyGrammarParser.LastFormalParameterContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameterList" ):
                return visitor.visitFormalParameterList(self)
            else:
                return visitor.visitChildren(self)




    def formalParameterList(self):

        localctx = JayPyGrammarParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.state = 278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 265
                self.formalParameter()
                self.state = 270
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 266
                        self.match(JayPyGrammarParser.COMMA)
                        self.state = 267
                        self.formalParameter() 
                    self.state = 272
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 273
                    self.match(JayPyGrammarParser.COMMA)
                    self.state = 274
                    self.lastFormalParameter()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 277
                self.lastFormalParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JayPyGrammarParser.VariableDeclaratorIdContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameter" ):
                return visitor.visitFormalParameter(self)
            else:
                return visitor.visitChildren(self)




    def formalParameter(self):

        localctx = JayPyGrammarParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_formalParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.typeType()
            self.state = 281
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JayPyGrammarParser.VariableDeclaratorIdContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_lastFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastFormalParameter" ):
                listener.enterLastFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastFormalParameter" ):
                listener.exitLastFormalParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastFormalParameter" ):
                return visitor.visitLastFormalParameter(self)
            else:
                return visitor.visitChildren(self)




    def lastFormalParameter(self):

        localctx = JayPyGrammarParser.LastFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_lastFormalParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.typeType()
            self.state = 284
            self.match(JayPyGrammarParser.T__1)
            self.state = 285
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.DOT)
            else:
                return self.getToken(JayPyGrammarParser.DOT, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = JayPyGrammarParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_qualifiedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.identifier()
            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==58:
                self.state = 288
                self.match(JayPyGrammarParser.DOT)
                self.state = 289
                self.identifier()
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatLiteral(self):
            return self.getTypedRuleContext(JayPyGrammarParser.FloatLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(JayPyGrammarParser.CHAR_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(JayPyGrammarParser.STRING_LITERAL, 0)

        def BOOL_LITERAL(self):
            return self.getToken(JayPyGrammarParser.BOOL_LITERAL, 0)

        def NULL_LITERAL(self):
            return self.getToken(JayPyGrammarParser.NULL_LITERAL, 0)

        def INT_LITERAL(self):
            return self.getToken(JayPyGrammarParser.INT_LITERAL, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = JayPyGrammarParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_literal)
        try:
            self.state = 301
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 295
                self.floatLiteral()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 296
                self.match(JayPyGrammarParser.CHAR_LITERAL)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 3)
                self.state = 297
                self.match(JayPyGrammarParser.STRING_LITERAL)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 4)
                self.state = 298
                self.match(JayPyGrammarParser.BOOL_LITERAL)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 5)
                self.state = 299
                self.match(JayPyGrammarParser.NULL_LITERAL)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 6)
                self.state = 300
                self.match(JayPyGrammarParser.INT_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(JayPyGrammarParser.FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_floatLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatLiteral" ):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatLiteral" ):
                listener.exitFloatLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatLiteral" ):
                return visitor.visitFloatLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatLiteral(self):

        localctx = JayPyGrammarParser.FloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_floatLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.match(JayPyGrammarParser.FLOAT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.ElementValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_elementValuePairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePairs" ):
                listener.enterElementValuePairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePairs" ):
                listener.exitElementValuePairs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValuePairs" ):
                return visitor.visitElementValuePairs(self)
            else:
                return visitor.visitChildren(self)




    def elementValuePairs(self):

        localctx = JayPyGrammarParser.ElementValuePairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_elementValuePairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.elementValuePair()
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 306
                self.match(JayPyGrammarParser.COMMA)
                self.state = 307
                self.elementValuePair()
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JayPyGrammarParser.ASSIGN, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_elementValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePair" ):
                listener.enterElementValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePair" ):
                listener.exitElementValuePair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValuePair" ):
                return visitor.visitElementValuePair(self)
            else:
                return visitor.visitChildren(self)




    def elementValuePair(self):

        localctx = JayPyGrammarParser.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_elementValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.identifier()
            self.state = 314
            self.match(JayPyGrammarParser.ASSIGN)
            self.state = 315
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ElementValueArrayInitializerContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_elementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue" ):
                listener.enterElementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue" ):
                listener.exitElementValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValue" ):
                return visitor.visitElementValue(self)
            else:
                return visitor.visitChildren(self)




    def elementValue(self):

        localctx = JayPyGrammarParser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_elementValue)
        try:
            self.state = 319
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 11, 13, 20, 22, 28, 29, 31, 33, 34, 37, 38, 39, 44, 46, 47, 48, 49, 50, 62, 63, 72, 73, 74, 75, 97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 317
                self.expression(0)
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 318
                self.elementValueArrayInitializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JayPyGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JayPyGrammarParser.RBRACE, 0)

        def elementValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.ElementValueContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.ElementValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_elementValueArrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueArrayInitializer" ):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueArrayInitializer" ):
                listener.exitElementValueArrayInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValueArrayInitializer" ):
                return visitor.visitElementValueArrayInitializer(self)
            else:
                return visitor.visitChildren(self)




    def elementValueArrayInitializer(self):

        localctx = JayPyGrammarParser.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_elementValueArrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self.match(JayPyGrammarParser.LBRACE)
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4604982404743943680) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 33554447) != 0):
                self.state = 322
                self.elementValue()
                self.state = 327
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 323
                        self.match(JayPyGrammarParser.COMMA)
                        self.state = 324
                        self.elementValue() 
                    self.state = 329
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,29,self._ctx)



            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 332
                self.match(JayPyGrammarParser.COMMA)


            self.state = 335
            self.match(JayPyGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JayPyGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JayPyGrammarParser.RBRACE, 0)

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = JayPyGrammarParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.match(JayPyGrammarParser.LBRACE)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4604982369284346368) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 33554447) != 0):
                self.state = 338
                self.blockStatement()
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 344
            self.match(JayPyGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JayPyGrammarParser.LocalVariableDeclarationContext,0)


        def SEMI(self):
            return self.getToken(JayPyGrammarParser.SEMI, 0)

        def statement(self):
            return self.getTypedRuleContext(JayPyGrammarParser.StatementContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = JayPyGrammarParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_blockStatement)
        try:
            self.state = 350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 346
                self.localVariableDeclaration()
                self.state = 347
                self.match(JayPyGrammarParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 349
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVar(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeOrVarContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JayPyGrammarParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalVariableDeclaration" ):
                return visitor.visitLocalVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localVariableDeclaration(self):

        localctx = JayPyGrammarParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_localVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.typeTypeOrVar()
            self.state = 353
            self.identifier()
            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 354
                self.match(JayPyGrammarParser.ASSIGN)
                self.state = 355
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JayPyGrammarParser.IDENTIFIER, 0)

        def VAR(self):
            return self.getToken(JayPyGrammarParser.VAR, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = JayPyGrammarParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            _la = self._input.LA(1)
            if not(_la==38 or _la==97):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JayPyGrammarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_typeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIdentifier" ):
                listener.enterTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIdentifier" ):
                listener.exitTypeIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeIdentifier" ):
                return visitor.visitTypeIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def typeIdentifier(self):

        localctx = JayPyGrammarParser.TypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_typeIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(JayPyGrammarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(JayPyGrammarParser.PRINT, 0)

        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(JayPyGrammarParser.SEMI, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_printStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintStatement" ):
                listener.enterPrintStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintStatement" ):
                listener.exitPrintStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintStatement" ):
                return visitor.visitPrintStatement(self)
            else:
                return visitor.visitChildren(self)




    def printStatement(self):

        localctx = JayPyGrammarParser.PrintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_printStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(JayPyGrammarParser.PRINT)
            self.state = 363
            self.match(JayPyGrammarParser.LPAREN)
            self.state = 364
            self.expression(0)
            self.state = 365
            self.match(JayPyGrammarParser.RPAREN)
            self.state = 366
            self.match(JayPyGrammarParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintlnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINTLN(self):
            return self.getToken(JayPyGrammarParser.PRINTLN, 0)

        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(JayPyGrammarParser.SEMI, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_printlnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintlnStatement" ):
                listener.enterPrintlnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintlnStatement" ):
                listener.exitPrintlnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintlnStatement" ):
                return visitor.visitPrintlnStatement(self)
            else:
                return visitor.visitChildren(self)




    def printlnStatement(self):

        localctx = JayPyGrammarParser.PrintlnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_printlnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.match(JayPyGrammarParser.PRINTLN)
            self.state = 369
            self.match(JayPyGrammarParser.LPAREN)
            self.state = 370
            self.expression(0)
            self.state = 371
            self.match(JayPyGrammarParser.RPAREN)
            self.state = 372
            self.match(JayPyGrammarParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.blockLabel = None # BlockContext
            self.statementExpression = None # ExpressionContext
            self.identifierLabel = None # IdentifierContext

        def block(self):
            return self.getTypedRuleContext(JayPyGrammarParser.BlockContext,0)


        def memberDeclaration(self):
            return self.getTypedRuleContext(JayPyGrammarParser.MemberDeclarationContext,0)


        def IF(self):
            return self.getToken(JayPyGrammarParser.IF, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ParExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.StatementContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(JayPyGrammarParser.ELSE, 0)

        def FOR(self):
            return self.getToken(JayPyGrammarParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def forControl(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ForControlContext,0)


        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def WHILE(self):
            return self.getToken(JayPyGrammarParser.WHILE, 0)

        def DO(self):
            return self.getToken(JayPyGrammarParser.DO, 0)

        def SEMI(self):
            return self.getToken(JayPyGrammarParser.SEMI, 0)

        def SWITCH(self):
            return self.getToken(JayPyGrammarParser.SWITCH, 0)

        def LBRACE(self):
            return self.getToken(JayPyGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JayPyGrammarParser.RBRACE, 0)

        def switchBlockStatementGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.SwitchBlockStatementGroupContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.SwitchBlockStatementGroupContext,i)


        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.SwitchLabelContext,i)


        def RETURN(self):
            return self.getToken(JayPyGrammarParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def BREAK(self):
            return self.getToken(JayPyGrammarParser.BREAK, 0)

        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def CONTINUE(self):
            return self.getToken(JayPyGrammarParser.CONTINUE, 0)

        def switchExpression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.SwitchExpressionContext,0)


        def COLON(self):
            return self.getToken(JayPyGrammarParser.COLON, 0)

        def typeTypeOrVar(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeOrVarContext,0)


        def IN(self):
            return self.getToken(JayPyGrammarParser.IN, 0)

        def printStatement(self):
            return self.getTypedRuleContext(JayPyGrammarParser.PrintStatementContext,0)


        def printlnStatement(self):
            return self.getTypedRuleContext(JayPyGrammarParser.PrintlnStatementContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = JayPyGrammarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 374
                localctx.blockLabel = self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 375
                self.memberDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 376
                self.match(JayPyGrammarParser.IF)
                self.state = 377
                self.parExpression()
                self.state = 378
                self.statement()
                self.state = 381
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 379
                    self.match(JayPyGrammarParser.ELSE)
                    self.state = 380
                    self.statement()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 383
                self.match(JayPyGrammarParser.FOR)
                self.state = 384
                self.match(JayPyGrammarParser.LPAREN)
                self.state = 385
                self.forControl()
                self.state = 386
                self.match(JayPyGrammarParser.RPAREN)
                self.state = 387
                self.statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 389
                self.match(JayPyGrammarParser.WHILE)
                self.state = 390
                self.parExpression()
                self.state = 391
                self.statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 393
                self.match(JayPyGrammarParser.DO)
                self.state = 394
                self.statement()
                self.state = 395
                self.match(JayPyGrammarParser.WHILE)
                self.state = 396
                self.parExpression()
                self.state = 397
                self.match(JayPyGrammarParser.SEMI)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 399
                self.match(JayPyGrammarParser.SWITCH)
                self.state = 400
                self.parExpression()
                self.state = 401
                self.match(JayPyGrammarParser.LBRACE)
                self.state = 405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 402
                        self.switchBlockStatementGroup() 
                    self.state = 407
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==12 or _la==16:
                    self.state = 408
                    self.switchLabel()
                    self.state = 413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 414
                self.match(JayPyGrammarParser.RBRACE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 416
                self.match(JayPyGrammarParser.RETURN)
                self.state = 418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4609486004371314176) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 33554447) != 0):
                    self.state = 417
                    self.expression(0)


                self.state = 420
                self.match(JayPyGrammarParser.SEMI)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 421
                self.match(JayPyGrammarParser.BREAK)
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==38 or _la==97:
                    self.state = 422
                    self.identifier()


                self.state = 425
                self.match(JayPyGrammarParser.SEMI)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 426
                self.match(JayPyGrammarParser.CONTINUE)
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==38 or _la==97:
                    self.state = 427
                    self.identifier()


                self.state = 430
                self.match(JayPyGrammarParser.SEMI)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 431
                localctx.statementExpression = self.expression(0)
                self.state = 432
                self.match(JayPyGrammarParser.SEMI)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 434
                self.switchExpression()
                self.state = 436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 435
                    self.match(JayPyGrammarParser.SEMI)


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 438
                localctx.identifierLabel = self.identifier()
                self.state = 439
                self.match(JayPyGrammarParser.COLON)
                self.state = 440
                self.statement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 442
                self.match(JayPyGrammarParser.FOR)
                self.state = 443
                self.match(JayPyGrammarParser.LPAREN)
                self.state = 444
                self.typeTypeOrVar()
                self.state = 445
                self.identifier()
                self.state = 446
                self.match(JayPyGrammarParser.IN)
                self.state = 447
                self.expression(0)
                self.state = 448
                self.match(JayPyGrammarParser.RPAREN)
                self.state = 449
                self.statement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 451
                self.printStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 452
                self.printlnStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockStatementGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.SwitchLabelContext,i)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_switchBlockStatementGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockStatementGroup" ):
                listener.enterSwitchBlockStatementGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockStatementGroup" ):
                listener.exitSwitchBlockStatementGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchBlockStatementGroup" ):
                return visitor.visitSwitchBlockStatementGroup(self)
            else:
                return visitor.visitChildren(self)




    def switchBlockStatementGroup(self):

        localctx = JayPyGrammarParser.SwitchBlockStatementGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_switchBlockStatementGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 455
                self.switchLabel()
                self.state = 458 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==12 or _la==16):
                    break

            self.state = 461 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 460
                self.blockStatement()
                self.state = 463 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -4604982369284346368) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 33554447) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constantExpression = None # ExpressionContext
            self.varName = None # IdentifierContext

        def CASE(self):
            return self.getToken(JayPyGrammarParser.CASE, 0)

        def COLON(self):
            return self.getToken(JayPyGrammarParser.COLON, 0)

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def DEFAULT(self):
            return self.getToken(JayPyGrammarParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchLabel" ):
                return visitor.visitSwitchLabel(self)
            else:
                return visitor.visitChildren(self)




    def switchLabel(self):

        localctx = JayPyGrammarParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_switchLabel)
        try:
            self.state = 476
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 465
                self.match(JayPyGrammarParser.CASE)
                self.state = 470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 466
                    localctx.constantExpression = self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 467
                    self.typeType()
                    self.state = 468
                    localctx.varName = self.identifier()
                    pass


                self.state = 472
                self.match(JayPyGrammarParser.COLON)
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 474
                self.match(JayPyGrammarParser.DEFAULT)
                self.state = 475
                self.match(JayPyGrammarParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.forUpdate = None # ExpressionListContext

        def enhancedForControl(self):
            return self.getTypedRuleContext(JayPyGrammarParser.EnhancedForControlContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.SEMI)
            else:
                return self.getToken(JayPyGrammarParser.SEMI, i)

        def forInit(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_forControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForControl" ):
                listener.enterForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForControl" ):
                listener.exitForControl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForControl" ):
                return visitor.visitForControl(self)
            else:
                return visitor.visitChildren(self)




    def forControl(self):

        localctx = JayPyGrammarParser.ForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_forControl)
        self._la = 0 # Token type
        try:
            self.state = 490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 478
                self.enhancedForControl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 432454773248) != 0):
                    self.state = 479
                    self.forInit()


                self.state = 482
                self.match(JayPyGrammarParser.SEMI)
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4609486004371314176) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 33554447) != 0):
                    self.state = 483
                    self.expression(0)


                self.state = 486
                self.match(JayPyGrammarParser.SEMI)
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4609486004371314176) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 33554447) != 0):
                    self.state = 487
                    localctx.forUpdate = self.expressionList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JayPyGrammarParser.LocalVariableDeclarationContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInit" ):
                return visitor.visitForInit(self)
            else:
                return visitor.visitChildren(self)




    def forInit(self):

        localctx = JayPyGrammarParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_forInit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.localVariableDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancedForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JayPyGrammarParser.VariableDeclaratorIdContext,0)


        def COLON(self):
            return self.getToken(JayPyGrammarParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def VAR(self):
            return self.getToken(JayPyGrammarParser.VAR, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_enhancedForControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForControl" ):
                listener.enterEnhancedForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForControl" ):
                listener.exitEnhancedForControl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnhancedForControl" ):
                return visitor.visitEnhancedForControl(self)
            else:
                return visitor.visitChildren(self)




    def enhancedForControl(self):

        localctx = JayPyGrammarParser.EnhancedForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_enhancedForControl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 11, 13, 20, 22, 28, 29, 31, 34, 37]:
                self.state = 494
                self.typeType()
                pass
            elif token in [38]:
                self.state = 495
                self.match(JayPyGrammarParser.VAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 498
            self.variableDeclaratorId()
            self.state = 499
            self.match(JayPyGrammarParser.COLON)
            self.state = 500
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_parExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParExpression" ):
                listener.enterParExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParExpression" ):
                listener.exitParExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParExpression" ):
                return visitor.visitParExpression(self)
            else:
                return visitor.visitChildren(self)




    def parExpression(self):

        localctx = JayPyGrammarParser.ParExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_parExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.match(JayPyGrammarParser.LPAREN)
            self.state = 503
            self.expression(0)
            self.state = 504
            self.match(JayPyGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = JayPyGrammarParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.expression(0)
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 507
                self.match(JayPyGrammarParser.COMMA)
                self.state = 508
                self.expression(0)
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ArgumentsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_methodCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCall" ):
                listener.enterMethodCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCall" ):
                listener.exitMethodCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodCall" ):
                return visitor.visitMethodCall(self)
            else:
                return visitor.visitChildren(self)




    def methodCall(self):

        localctx = JayPyGrammarParser.MethodCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_methodCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.identifier()
            self.state = 515
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.prefix = None # Token
            self.bop = None # Token
            self.postfix = None # Token

        def primary(self):
            return self.getTypedRuleContext(JayPyGrammarParser.PrimaryContext,0)


        def methodCall(self):
            return self.getTypedRuleContext(JayPyGrammarParser.MethodCallContext,0)


        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeArgumentsContext,0)


        def switchExpression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.SwitchExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,i)


        def ADD(self):
            return self.getToken(JayPyGrammarParser.ADD, 0)

        def SUB(self):
            return self.getToken(JayPyGrammarParser.SUB, 0)

        def INC(self):
            return self.getToken(JayPyGrammarParser.INC, 0)

        def DEC(self):
            return self.getToken(JayPyGrammarParser.DEC, 0)

        def TILDE(self):
            return self.getToken(JayPyGrammarParser.TILDE, 0)

        def BANG(self):
            return self.getToken(JayPyGrammarParser.BANG, 0)

        def literal(self):
            return self.getTypedRuleContext(JayPyGrammarParser.LiteralContext,0)


        def lambdaExpression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.LambdaExpressionContext,0)


        def MUL(self):
            return self.getToken(JayPyGrammarParser.MUL, 0)

        def DIV(self):
            return self.getToken(JayPyGrammarParser.DIV, 0)

        def MOD(self):
            return self.getToken(JayPyGrammarParser.MOD, 0)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.LT)
            else:
                return self.getToken(JayPyGrammarParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.GT)
            else:
                return self.getToken(JayPyGrammarParser.GT, i)

        def LE(self):
            return self.getToken(JayPyGrammarParser.LE, 0)

        def GE(self):
            return self.getToken(JayPyGrammarParser.GE, 0)

        def EQUAL(self):
            return self.getToken(JayPyGrammarParser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(JayPyGrammarParser.NOTEQUAL, 0)

        def BITAND(self):
            return self.getToken(JayPyGrammarParser.BITAND, 0)

        def CARET(self):
            return self.getToken(JayPyGrammarParser.CARET, 0)

        def BITOR(self):
            return self.getToken(JayPyGrammarParser.BITOR, 0)

        def COLON(self):
            return self.getToken(JayPyGrammarParser.COLON, 0)

        def QUESTION(self):
            return self.getToken(JayPyGrammarParser.QUESTION, 0)

        def ASSIGN(self):
            return self.getToken(JayPyGrammarParser.ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.DIV_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.XOR_ASSIGN, 0)

        def RSHIFT_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.RSHIFT_ASSIGN, 0)

        def URSHIFT_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.URSHIFT_ASSIGN, 0)

        def LSHIFT_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.LSHIFT_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.MOD_ASSIGN, 0)

        def LBRACK(self):
            return self.getToken(JayPyGrammarParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(JayPyGrammarParser.RBRACK, 0)

        def DOT(self):
            return self.getToken(JayPyGrammarParser.DOT, 0)

        def INSTANCEOF(self):
            return self.getToken(JayPyGrammarParser.INSTANCEOF, 0)

        def pattern(self):
            return self.getTypedRuleContext(JayPyGrammarParser.PatternContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JayPyGrammarParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 518
                self.primary()
                pass

            elif la_ == 2:
                self.state = 519
                self.methodCall()
                pass

            elif la_ == 3:
                self.state = 520
                self.typeType()

                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 521
                    self.typeArguments()


                self.state = 524
                self.identifier()
                pass

            elif la_ == 4:
                self.state = 526
                self.switchExpression()
                pass

            elif la_ == 5:
                self.state = 527
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & 15363) != 0)):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 528
                self.expression(18)
                pass

            elif la_ == 6:
                self.state = 529
                self.literal()
                pass

            elif la_ == 7:
                self.state = 530
                self.lambdaExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 612
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 610
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                    if la_ == 1:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 533
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 534
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==3 or _la==4 or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 35) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 535
                        self.expression(17)
                        pass

                    elif la_ == 2:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 536
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 537
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==74 or _la==75):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 538
                        self.expression(16)
                        pass

                    elif la_ == 3:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 539
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 547
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                        if la_ == 1:
                            self.state = 540
                            self.match(JayPyGrammarParser.LT)
                            self.state = 541
                            self.match(JayPyGrammarParser.LT)
                            pass

                        elif la_ == 2:
                            self.state = 542
                            self.match(JayPyGrammarParser.GT)
                            self.state = 543
                            self.match(JayPyGrammarParser.GT)
                            self.state = 544
                            self.match(JayPyGrammarParser.GT)
                            pass

                        elif la_ == 3:
                            self.state = 545
                            self.match(JayPyGrammarParser.GT)
                            self.state = 546
                            self.match(JayPyGrammarParser.GT)
                            pass


                        self.state = 549
                        self.expression(15)
                        pass

                    elif la_ == 4:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 550
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 551
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & 387) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 552
                        self.expression(14)
                        pass

                    elif la_ == 5:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 553
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 554
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==66 or _la==69):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 555
                        self.expression(12)
                        pass

                    elif la_ == 6:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 556
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 557
                        localctx.bop = self.match(JayPyGrammarParser.BITAND)
                        self.state = 558
                        self.expression(11)
                        pass

                    elif la_ == 7:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 559
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 560
                        localctx.bop = self.match(JayPyGrammarParser.CARET)
                        self.state = 561
                        self.expression(10)
                        pass

                    elif la_ == 8:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 562
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 563
                        localctx.bop = self.match(JayPyGrammarParser.BITOR)
                        self.state = 564
                        self.expression(9)
                        pass

                    elif la_ == 9:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 565
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 566
                        localctx.bop = self.match(JayPyGrammarParser.T__4)
                        self.state = 567
                        self.expression(8)
                        pass

                    elif la_ == 10:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 568
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 569
                        localctx.bop = self.match(JayPyGrammarParser.T__5)
                        self.state = 570
                        self.expression(7)
                        pass

                    elif la_ == 11:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 571
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 572
                        localctx.bop = self.match(JayPyGrammarParser.T__6)
                        self.state = 573
                        self.expression(6)
                        pass

                    elif la_ == 12:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 574
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 575
                        localctx.bop = self.match(JayPyGrammarParser.T__7)
                        self.state = 576
                        self.expression(5)
                        pass

                    elif la_ == 13:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 577
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 578
                        localctx.bop = self.match(JayPyGrammarParser.QUESTION)
                        self.state = 579
                        self.expression(0)
                        self.state = 580
                        self.match(JayPyGrammarParser.COLON)
                        self.state = 581
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 583
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 584
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & 17171480577) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 585
                        self.expression(2)
                        pass

                    elif la_ == 15:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 586
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 587
                        self.match(JayPyGrammarParser.LBRACK)
                        self.state = 588
                        self.expression(0)
                        self.state = 589
                        self.match(JayPyGrammarParser.RBRACK)
                        pass

                    elif la_ == 16:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 591
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 592
                        localctx.bop = self.match(JayPyGrammarParser.DOT)
                        self.state = 595
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                        if la_ == 1:
                            self.state = 593
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 594
                            self.methodCall()
                            pass


                        pass

                    elif la_ == 17:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 597
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 599
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==61:
                            self.state = 598
                            self.typeArguments()


                        self.state = 601
                        self.identifier()
                        pass

                    elif la_ == 18:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 602
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 603
                        localctx.postfix = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==72 or _la==73):
                            localctx.postfix = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 19:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 604
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 605
                        localctx.bop = self.match(JayPyGrammarParser.INSTANCEOF)
                        self.state = 608
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                        if la_ == 1:
                            self.state = 606
                            self.typeType()
                            pass

                        elif la_ == 2:
                            self.state = 607
                            self.pattern()
                            pass


                        pass

             
                self.state = 614
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,i)


        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JayPyGrammarParser.FormalParameterListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def lambdaLVTIList(self):
            return self.getTypedRuleContext(JayPyGrammarParser.LambdaLVTIListContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaParameters" ):
                return visitor.visitLambdaParameters(self)
            else:
                return visitor.visitChildren(self)




    def lambdaParameters(self):

        localctx = JayPyGrammarParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 615
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 616
                self.match(JayPyGrammarParser.LPAREN)
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 157576866304) != 0):
                    self.state = 617
                    self.formalParameterList()


                self.state = 620
                self.match(JayPyGrammarParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 621
                self.match(JayPyGrammarParser.LPAREN)
                self.state = 622
                self.identifier()
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==57:
                    self.state = 623
                    self.match(JayPyGrammarParser.COMMA)
                    self.state = 624
                    self.identifier()
                    self.state = 629
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 630
                self.match(JayPyGrammarParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 632
                self.match(JayPyGrammarParser.LPAREN)
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==38:
                    self.state = 633
                    self.lambdaLVTIList()


                self.state = 636
                self.match(JayPyGrammarParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameters(self):
            return self.getTypedRuleContext(JayPyGrammarParser.LambdaParametersContext,0)


        def ARROW(self):
            return self.getToken(JayPyGrammarParser.ARROW, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(JayPyGrammarParser.LambdaBodyContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_lambdaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpression" ):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpression" ):
                listener.exitLambdaExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaExpression" ):
                return visitor.visitLambdaExpression(self)
            else:
                return visitor.visitChildren(self)




    def lambdaExpression(self):

        localctx = JayPyGrammarParser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_lambdaExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.lambdaParameters()
            self.state = 640
            self.match(JayPyGrammarParser.ARROW)
            self.state = 641
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(JayPyGrammarParser.BlockContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_lambdaBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody" ):
                listener.enterLambdaBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody" ):
                listener.exitLambdaBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaBody" ):
                return visitor.visitLambdaBody(self)
            else:
                return visitor.visitChildren(self)




    def lambdaBody(self):

        localctx = JayPyGrammarParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_lambdaBody)
        try:
            self.state = 645
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 11, 13, 20, 22, 28, 29, 31, 33, 34, 37, 38, 39, 44, 46, 47, 48, 49, 50, 62, 63, 72, 73, 74, 75, 97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 643
                self.expression(0)
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 644
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLVTIListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaLVTIParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.LambdaLVTIParameterContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.LambdaLVTIParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_lambdaLVTIList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLVTIList" ):
                listener.enterLambdaLVTIList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLVTIList" ):
                listener.exitLambdaLVTIList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaLVTIList" ):
                return visitor.visitLambdaLVTIList(self)
            else:
                return visitor.visitChildren(self)




    def lambdaLVTIList(self):

        localctx = JayPyGrammarParser.LambdaLVTIListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_lambdaLVTIList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.lambdaLVTIParameter()
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 648
                self.match(JayPyGrammarParser.COMMA)
                self.state = 649
                self.lambdaLVTIParameter()
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLVTIParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JayPyGrammarParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_lambdaLVTIParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLVTIParameter" ):
                listener.enterLambdaLVTIParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLVTIParameter" ):
                listener.exitLambdaLVTIParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaLVTIParameter" ):
                return visitor.visitLambdaLVTIParameter(self)
            else:
                return visitor.visitChildren(self)




    def lambdaLVTIParameter(self):

        localctx = JayPyGrammarParser.LambdaLVTIParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_lambdaLVTIParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(JayPyGrammarParser.VAR)
            self.state = 656
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = JayPyGrammarParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.typeType()
            self.state = 659
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def literal(self):
            return self.getTypedRuleContext(JayPyGrammarParser.LiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)




    def primary(self):

        localctx = JayPyGrammarParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_primary)
        try:
            self.state = 667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 661
                self.match(JayPyGrammarParser.LPAREN)
                self.state = 662
                self.expression(0)
                self.state = 663
                self.match(JayPyGrammarParser.RPAREN)
                pass
            elif token in [39, 44, 46, 47, 48, 49]:
                self.enterOuterAlt(localctx, 2)
                self.state = 665
                self.literal()
                pass
            elif token in [38, 97]:
                self.enterOuterAlt(localctx, 3)
                self.state = 666
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(JayPyGrammarParser.SWITCH, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ParExpressionContext,0)


        def LBRACE(self):
            return self.getToken(JayPyGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JayPyGrammarParser.RBRACE, 0)

        def switchLabeledRule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.SwitchLabeledRuleContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.SwitchLabeledRuleContext,i)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_switchExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchExpression" ):
                listener.enterSwitchExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchExpression" ):
                listener.exitSwitchExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchExpression" ):
                return visitor.visitSwitchExpression(self)
            else:
                return visitor.visitChildren(self)




    def switchExpression(self):

        localctx = JayPyGrammarParser.SwitchExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_switchExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(JayPyGrammarParser.SWITCH)
            self.state = 670
            self.parExpression()
            self.state = 671
            self.match(JayPyGrammarParser.LBRACE)
            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==12 or _la==16:
                self.state = 672
                self.switchLabeledRule()
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 678
            self.match(JayPyGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabeledRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(JayPyGrammarParser.CASE, 0)

        def switchRuleOutcome(self):
            return self.getTypedRuleContext(JayPyGrammarParser.SwitchRuleOutcomeContext,0)


        def ARROW(self):
            return self.getToken(JayPyGrammarParser.ARROW, 0)

        def COLON(self):
            return self.getToken(JayPyGrammarParser.COLON, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionListContext,0)


        def NULL_LITERAL(self):
            return self.getToken(JayPyGrammarParser.NULL_LITERAL, 0)

        def guardedPattern(self):
            return self.getTypedRuleContext(JayPyGrammarParser.GuardedPatternContext,0)


        def DEFAULT(self):
            return self.getToken(JayPyGrammarParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_switchLabeledRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabeledRule" ):
                listener.enterSwitchLabeledRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabeledRule" ):
                listener.exitSwitchLabeledRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchLabeledRule" ):
                return visitor.visitSwitchLabeledRule(self)
            else:
                return visitor.visitChildren(self)




    def switchLabeledRule(self):

        localctx = JayPyGrammarParser.SwitchLabeledRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_switchLabeledRule)
        self._la = 0 # Token type
        try:
            self.state = 691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 680
                self.match(JayPyGrammarParser.CASE)
                self.state = 684
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 681
                    self.expressionList()
                    pass

                elif la_ == 2:
                    self.state = 682
                    self.match(JayPyGrammarParser.NULL_LITERAL)
                    pass

                elif la_ == 3:
                    self.state = 683
                    self.guardedPattern(0)
                    pass


                self.state = 686
                _la = self._input.LA(1)
                if not(_la==65 or _la==93):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 687
                self.switchRuleOutcome()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 688
                self.match(JayPyGrammarParser.DEFAULT)
                self.state = 689
                _la = self._input.LA(1)
                if not(_la==65 or _la==93):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 690
                self.switchRuleOutcome()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardedPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def guardedPattern(self):
            return self.getTypedRuleContext(JayPyGrammarParser.GuardedPatternContext,0)


        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_guardedPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuardedPattern" ):
                listener.enterGuardedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuardedPattern" ):
                listener.exitGuardedPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuardedPattern" ):
                return visitor.visitGuardedPattern(self)
            else:
                return visitor.visitChildren(self)



    def guardedPattern(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JayPyGrammarParser.GuardedPatternContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_guardedPattern, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.state = 694
                self.match(JayPyGrammarParser.LPAREN)
                self.state = 695
                self.guardedPattern(0)
                self.state = 696
                self.match(JayPyGrammarParser.RPAREN)
                pass
            elif token in [9, 11, 13, 20, 22, 28, 29, 31, 34, 37]:
                self.state = 698
                self.typeType()
                self.state = 699
                self.identifier()
                self.state = 704
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 700
                        self.match(JayPyGrammarParser.T__4)
                        self.state = 701
                        self.expression(0) 
                    self.state = 706
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 714
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JayPyGrammarParser.GuardedPatternContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_guardedPattern)
                    self.state = 709
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 710
                    self.match(JayPyGrammarParser.T__4)
                    self.state = 711
                    self.expression(0) 
                self.state = 716
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SwitchRuleOutcomeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JayPyGrammarParser.BlockContext,0)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_switchRuleOutcome

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchRuleOutcome" ):
                listener.enterSwitchRuleOutcome(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchRuleOutcome" ):
                listener.exitSwitchRuleOutcome(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchRuleOutcome" ):
                return visitor.visitSwitchRuleOutcome(self)
            else:
                return visitor.visitChildren(self)




    def switchRuleOutcome(self):

        localctx = JayPyGrammarParser.SwitchRuleOutcomeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_switchRuleOutcome)
        self._la = 0 # Token type
        try:
            self.state = 724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 717
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4604982369284346368) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 33554447) != 0):
                    self.state = 718
                    self.blockStatement()
                    self.state = 723
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ArrayInitializerContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.LBRACK)
            else:
                return self.getToken(JayPyGrammarParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.RBRACK)
            else:
                return self.getToken(JayPyGrammarParser.RBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_arrayCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreatorRest" ):
                listener.enterArrayCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreatorRest" ):
                listener.exitArrayCreatorRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayCreatorRest" ):
                return visitor.visitArrayCreatorRest(self)
            else:
                return visitor.visitChildren(self)




    def arrayCreatorRest(self):

        localctx = JayPyGrammarParser.ArrayCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_arrayCreatorRest)
        self._la = 0 # Token type
        try:
            self.state = 748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 728 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 726
                    self.match(JayPyGrammarParser.LBRACK)
                    self.state = 727
                    self.match(JayPyGrammarParser.RBRACK)
                    self.state = 730 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==54):
                        break

                self.state = 732
                self.arrayInitializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 737 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 733
                        self.match(JayPyGrammarParser.LBRACK)
                        self.state = 734
                        self.expression(0)
                        self.state = 735
                        self.match(JayPyGrammarParser.RBRACK)

                    else:
                        raise NoViableAltException(self)
                    self.state = 739 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==54:
                    self.state = 741
                    self.match(JayPyGrammarParser.LBRACK)
                    self.state = 742
                    self.match(JayPyGrammarParser.RBRACK)
                    self.state = 747
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(JayPyGrammarParser.BOOLEAN, 0)

        def INT(self):
            return self.getToken(JayPyGrammarParser.INT, 0)

        def CHAR(self):
            return self.getToken(JayPyGrammarParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(JayPyGrammarParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(JayPyGrammarParser.SHORT, 0)

        def LONG(self):
            return self.getToken(JayPyGrammarParser.LONG, 0)

        def FLOAT(self):
            return self.getToken(JayPyGrammarParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(JayPyGrammarParser.DOUBLE, 0)

        def VOID(self):
            return self.getToken(JayPyGrammarParser.VOID, 0)

        def STRING(self):
            return self.getToken(JayPyGrammarParser.STRING, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveType" ):
                return visitor.visitPrimitiveType(self)
            else:
                return visitor.visitChildren(self)




    def primitiveType(self):

        localctx = JayPyGrammarParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 157576866304) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JayPyGrammarParser.LT, 0)

        def typeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.TypeArgumentContext,i)


        def GT(self):
            return self.getToken(JayPyGrammarParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArguments" ):
                return visitor.visitTypeArguments(self)
            else:
                return visitor.visitChildren(self)




    def typeArguments(self):

        localctx = JayPyGrammarParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(JayPyGrammarParser.LT)
            self.state = 753
            self.typeArgument()
            self.state = 758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 754
                self.match(JayPyGrammarParser.COMMA)
                self.state = 755
                self.typeArgument()
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 761
            self.match(JayPyGrammarParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = JayPyGrammarParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(JayPyGrammarParser.LPAREN)
            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4609486004371314176) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 33554447) != 0):
                self.state = 764
                self.expressionList()


            self.state = 767
            self.match(JayPyGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_typeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgument" ):
                listener.enterTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgument" ):
                listener.exitTypeArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArgument" ):
                return visitor.visitTypeArgument(self)
            else:
                return visitor.visitChildren(self)




    def typeArgument(self):

        localctx = JayPyGrammarParser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_typeArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.typeType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeList" ):
                return visitor.visitTypeList(self)
            else:
                return visitor.visitChildren(self)




    def typeList(self):

        localctx = JayPyGrammarParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.typeType()
            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 772
                self.match(JayPyGrammarParser.COMMA)
                self.state = 773
                self.typeType()
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.PrimitiveTypeContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.LBRACK)
            else:
                return self.getToken(JayPyGrammarParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.RBRACK)
            else:
                return self.getToken(JayPyGrammarParser.RBRACK, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_typeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeType" ):
                listener.enterTypeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeType" ):
                listener.exitTypeType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeType" ):
                return visitor.visitTypeType(self)
            else:
                return visitor.visitChildren(self)




    def typeType(self):

        localctx = JayPyGrammarParser.TypeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_typeType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.primitiveType()
            self.state = 784
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 780
                    self.match(JayPyGrammarParser.LBRACK)
                    self.state = 781
                    self.match(JayPyGrammarParser.RBRACK) 
                self.state = 786
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[41] = self.expression_sempred
        self._predicates[51] = self.guardedPattern_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 12)
         

    def guardedPattern_sempred(self, localctx:GuardedPatternContext, predIndex:int):
            if predIndex == 19:
                return self.precpred(self._ctx, 1)
         




