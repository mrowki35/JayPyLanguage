# Generated from C:/Javalib/test/JayPyGrammar.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,93,782,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,1,0,
        5,0,120,8,0,10,0,12,0,123,9,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,131,8,
        0,10,0,12,0,134,9,0,1,0,1,0,5,0,138,8,0,10,0,12,0,141,9,0,1,0,1,
        0,1,1,1,1,3,1,147,8,1,1,2,1,2,1,2,1,2,3,2,153,8,2,1,2,1,2,1,2,5,
        2,158,8,2,10,2,12,2,161,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,170,
        8,2,1,3,1,3,3,3,174,8,3,1,4,1,4,3,4,178,8,4,1,5,1,5,3,5,182,8,5,
        1,6,1,6,1,6,1,6,1,7,1,7,1,7,5,7,191,8,7,10,7,12,7,194,9,7,1,8,1,
        8,1,8,3,8,199,8,8,1,9,1,9,1,9,5,9,204,8,9,10,9,12,9,207,9,9,1,10,
        1,10,3,10,211,8,10,1,11,1,11,1,11,1,11,5,11,217,8,11,10,11,12,11,
        220,9,11,1,11,3,11,223,8,11,3,11,225,8,11,1,11,1,11,1,12,1,12,1,
        12,5,12,232,8,12,10,12,12,12,235,9,12,1,13,1,13,3,13,239,8,13,1,
        13,1,13,1,13,3,13,244,8,13,1,13,3,13,247,8,13,3,13,249,8,13,1,13,
        1,13,1,14,1,14,1,14,1,14,5,14,257,8,14,10,14,12,14,260,9,14,1,15,
        1,15,1,15,5,15,265,8,15,10,15,12,15,268,9,15,1,15,1,15,3,15,272,
        8,15,1,15,3,15,275,8,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,5,18,287,8,18,10,18,12,18,290,9,18,1,19,1,19,1,19,1,19,
        1,19,1,19,3,19,298,8,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,5,22,
        307,8,22,10,22,12,22,310,9,22,1,23,1,23,1,23,1,23,1,24,1,24,3,24,
        318,8,24,1,25,1,25,1,25,1,25,5,25,324,8,25,10,25,12,25,327,9,25,
        3,25,329,8,25,1,25,3,25,332,8,25,1,25,1,25,1,26,1,26,5,26,338,8,
        26,10,26,12,26,341,9,26,1,26,1,26,1,27,1,27,1,27,1,27,3,27,349,8,
        27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
        28,3,28,364,8,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,3,31,377,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,399,
        8,31,10,31,12,31,402,9,31,1,31,5,31,405,8,31,10,31,12,31,408,9,31,
        1,31,1,31,1,31,1,31,3,31,414,8,31,1,31,1,31,1,31,3,31,419,8,31,1,
        31,1,31,1,31,3,31,424,8,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,432,
        8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,3,31,447,8,31,1,32,4,32,450,8,32,11,32,12,32,451,1,32,4,32,
        455,8,32,11,32,12,32,456,1,33,1,33,1,33,1,33,1,33,3,33,464,8,33,
        1,33,1,33,1,33,1,33,3,33,470,8,33,1,34,1,34,3,34,474,8,34,1,34,1,
        34,3,34,478,8,34,1,34,1,34,3,34,482,8,34,3,34,484,8,34,1,35,1,35,
        3,35,488,8,35,1,36,1,36,3,36,492,8,36,1,36,1,36,1,36,1,36,1,37,1,
        37,1,37,1,37,1,38,1,38,1,38,5,38,505,8,38,10,38,12,38,508,9,38,1,
        39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,3,40,518,8,40,1,40,1,40,1,
        40,1,40,1,40,1,40,3,40,526,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,542,8,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,3,40,590,8,40,1,40,1,40,3,40,594,8,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,3,40,603,8,40,5,40,605,8,40,10,40,
        12,40,608,9,40,1,41,1,41,1,41,3,41,613,8,41,1,41,1,41,1,41,1,41,
        1,41,5,41,620,8,41,10,41,12,41,623,9,41,1,41,1,41,1,41,1,41,3,41,
        629,8,41,1,41,3,41,632,8,41,1,42,1,42,1,42,1,42,1,43,1,43,3,43,640,
        8,43,1,44,1,44,1,44,5,44,645,8,44,10,44,12,44,648,9,44,1,45,1,45,
        1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,3,47,662,8,47,
        1,48,1,48,1,48,1,48,5,48,668,8,48,10,48,12,48,671,9,48,1,48,1,48,
        1,49,1,49,1,49,1,49,3,49,679,8,49,1,49,1,49,1,49,1,49,1,49,3,49,
        686,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,697,8,
        50,10,50,12,50,700,9,50,3,50,702,8,50,1,50,1,50,1,50,5,50,707,8,
        50,10,50,12,50,710,9,50,1,51,1,51,5,51,714,8,51,10,51,12,51,717,
        9,51,3,51,719,8,51,1,52,1,52,4,52,723,8,52,11,52,12,52,724,1,52,
        1,52,1,52,1,52,1,52,4,52,732,8,52,11,52,12,52,733,1,52,1,52,5,52,
        738,8,52,10,52,12,52,741,9,52,3,52,743,8,52,1,53,1,53,1,54,1,54,
        1,54,1,54,5,54,751,8,54,10,54,12,54,754,9,54,1,54,1,54,1,55,1,55,
        3,55,760,8,55,1,55,1,55,1,56,1,56,1,57,1,57,1,57,5,57,769,8,57,10,
        57,12,57,772,9,57,1,58,1,58,1,58,5,58,777,8,58,10,58,12,58,780,9,
        58,1,58,0,2,80,100,59,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
        32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
        76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,0,11,2,0,36,36,44,44,2,0,34,34,93,93,2,0,58,59,68,71,2,0,
        72,73,77,77,1,0,70,71,2,0,56,57,63,64,2,0,62,62,65,65,2,0,55,55,
        78,88,1,0,68,69,2,0,61,61,89,89,9,0,7,7,9,9,11,11,16,16,18,18,24,
        25,27,27,30,30,33,33,852,0,121,1,0,0,0,2,146,1,0,0,0,4,169,1,0,0,
        0,6,173,1,0,0,0,8,177,1,0,0,0,10,181,1,0,0,0,12,183,1,0,0,0,14,187,
        1,0,0,0,16,195,1,0,0,0,18,200,1,0,0,0,20,210,1,0,0,0,22,212,1,0,
        0,0,24,228,1,0,0,0,26,236,1,0,0,0,28,252,1,0,0,0,30,274,1,0,0,0,
        32,276,1,0,0,0,34,279,1,0,0,0,36,283,1,0,0,0,38,297,1,0,0,0,40,299,
        1,0,0,0,42,301,1,0,0,0,44,303,1,0,0,0,46,311,1,0,0,0,48,317,1,0,
        0,0,50,319,1,0,0,0,52,335,1,0,0,0,54,348,1,0,0,0,56,363,1,0,0,0,
        58,365,1,0,0,0,60,367,1,0,0,0,62,446,1,0,0,0,64,449,1,0,0,0,66,469,
        1,0,0,0,68,483,1,0,0,0,70,487,1,0,0,0,72,491,1,0,0,0,74,497,1,0,
        0,0,76,501,1,0,0,0,78,509,1,0,0,0,80,525,1,0,0,0,82,631,1,0,0,0,
        84,633,1,0,0,0,86,639,1,0,0,0,88,641,1,0,0,0,90,649,1,0,0,0,92,652,
        1,0,0,0,94,661,1,0,0,0,96,663,1,0,0,0,98,685,1,0,0,0,100,701,1,0,
        0,0,102,718,1,0,0,0,104,742,1,0,0,0,106,744,1,0,0,0,108,746,1,0,
        0,0,110,757,1,0,0,0,112,763,1,0,0,0,114,765,1,0,0,0,116,773,1,0,
        0,0,118,120,3,4,2,0,119,118,1,0,0,0,120,123,1,0,0,0,121,119,1,0,
        0,0,121,122,1,0,0,0,122,124,1,0,0,0,123,121,1,0,0,0,124,125,5,24,
        0,0,125,126,5,1,0,0,126,127,5,46,0,0,127,128,5,47,0,0,128,132,5,
        48,0,0,129,131,3,62,31,0,130,129,1,0,0,0,131,134,1,0,0,0,132,130,
        1,0,0,0,132,133,1,0,0,0,133,135,1,0,0,0,134,132,1,0,0,0,135,139,
        5,49,0,0,136,138,3,4,2,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,
        1,0,0,0,139,140,1,0,0,0,140,142,1,0,0,0,141,139,1,0,0,0,142,143,
        5,0,0,1,143,1,1,0,0,0,144,147,3,4,2,0,145,147,3,12,6,0,146,144,1,
        0,0,0,146,145,1,0,0,0,147,3,1,0,0,0,148,149,3,8,4,0,149,150,3,58,
        29,0,150,152,5,46,0,0,151,153,3,26,13,0,152,151,1,0,0,0,152,153,
        1,0,0,0,153,154,1,0,0,0,154,159,5,47,0,0,155,156,5,50,0,0,156,158,
        5,51,0,0,157,155,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,
        1,0,0,0,160,162,1,0,0,0,161,159,1,0,0,0,162,163,3,6,3,0,163,170,
        1,0,0,0,164,165,5,30,0,0,165,166,3,58,29,0,166,167,3,26,13,0,167,
        168,3,6,3,0,168,170,1,0,0,0,169,148,1,0,0,0,169,164,1,0,0,0,170,
        5,1,0,0,0,171,174,3,52,26,0,172,174,5,52,0,0,173,171,1,0,0,0,173,
        172,1,0,0,0,174,7,1,0,0,0,175,178,3,116,58,0,176,178,5,30,0,0,177,
        175,1,0,0,0,177,176,1,0,0,0,178,9,1,0,0,0,179,182,3,116,58,0,180,
        182,5,34,0,0,181,179,1,0,0,0,181,180,1,0,0,0,182,11,1,0,0,0,183,
        184,3,116,58,0,184,185,3,14,7,0,185,186,5,52,0,0,186,13,1,0,0,0,
        187,192,3,16,8,0,188,189,5,53,0,0,189,191,3,16,8,0,190,188,1,0,0,
        0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,15,1,0,0,0,
        194,192,1,0,0,0,195,198,3,18,9,0,196,197,5,55,0,0,197,199,3,20,10,
        0,198,196,1,0,0,0,198,199,1,0,0,0,199,17,1,0,0,0,200,205,3,58,29,
        0,201,202,5,50,0,0,202,204,5,51,0,0,203,201,1,0,0,0,204,207,1,0,
        0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,19,1,0,0,0,207,205,1,0,0,
        0,208,211,3,22,11,0,209,211,3,80,40,0,210,208,1,0,0,0,210,209,1,
        0,0,0,211,21,1,0,0,0,212,224,5,48,0,0,213,218,3,20,10,0,214,215,
        5,53,0,0,215,217,3,20,10,0,216,214,1,0,0,0,217,220,1,0,0,0,218,216,
        1,0,0,0,218,219,1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,221,223,
        5,53,0,0,222,221,1,0,0,0,222,223,1,0,0,0,223,225,1,0,0,0,224,213,
        1,0,0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,227,5,49,0,0,227,23,
        1,0,0,0,228,233,3,36,18,0,229,230,5,53,0,0,230,232,3,36,18,0,231,
        229,1,0,0,0,232,235,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,
        25,1,0,0,0,235,233,1,0,0,0,236,248,5,46,0,0,237,239,3,28,14,0,238,
        237,1,0,0,0,238,239,1,0,0,0,239,249,1,0,0,0,240,243,3,28,14,0,241,
        242,5,53,0,0,242,244,3,30,15,0,243,241,1,0,0,0,243,244,1,0,0,0,244,
        249,1,0,0,0,245,247,3,30,15,0,246,245,1,0,0,0,246,247,1,0,0,0,247,
        249,1,0,0,0,248,238,1,0,0,0,248,240,1,0,0,0,248,246,1,0,0,0,249,
        250,1,0,0,0,250,251,5,47,0,0,251,27,1,0,0,0,252,258,3,116,58,0,253,
        254,3,58,29,0,254,255,5,54,0,0,255,257,1,0,0,0,256,253,1,0,0,0,257,
        260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,29,1,0,0,0,260,258,
        1,0,0,0,261,266,3,32,16,0,262,263,5,53,0,0,263,265,3,32,16,0,264,
        262,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,
        271,1,0,0,0,268,266,1,0,0,0,269,270,5,53,0,0,270,272,3,34,17,0,271,
        269,1,0,0,0,271,272,1,0,0,0,272,275,1,0,0,0,273,275,3,34,17,0,274,
        261,1,0,0,0,274,273,1,0,0,0,275,31,1,0,0,0,276,277,3,116,58,0,277,
        278,3,18,9,0,278,33,1,0,0,0,279,280,3,116,58,0,280,281,5,2,0,0,281,
        282,3,18,9,0,282,35,1,0,0,0,283,288,3,58,29,0,284,285,5,54,0,0,285,
        287,3,58,29,0,286,284,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,
        289,1,0,0,0,289,37,1,0,0,0,290,288,1,0,0,0,291,298,3,40,20,0,292,
        298,3,42,21,0,293,298,5,42,0,0,294,298,5,43,0,0,295,298,5,41,0,0,
        296,298,5,45,0,0,297,291,1,0,0,0,297,292,1,0,0,0,297,293,1,0,0,0,
        297,294,1,0,0,0,297,295,1,0,0,0,297,296,1,0,0,0,298,39,1,0,0,0,299,
        300,7,0,0,0,300,41,1,0,0,0,301,302,5,39,0,0,302,43,1,0,0,0,303,308,
        3,46,23,0,304,305,5,53,0,0,305,307,3,46,23,0,306,304,1,0,0,0,307,
        310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,45,1,0,0,0,310,308,
        1,0,0,0,311,312,3,58,29,0,312,313,5,55,0,0,313,314,3,48,24,0,314,
        47,1,0,0,0,315,318,3,80,40,0,316,318,3,50,25,0,317,315,1,0,0,0,317,
        316,1,0,0,0,318,49,1,0,0,0,319,328,5,48,0,0,320,325,3,48,24,0,321,
        322,5,53,0,0,322,324,3,48,24,0,323,321,1,0,0,0,324,327,1,0,0,0,325,
        323,1,0,0,0,325,326,1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,328,
        320,1,0,0,0,328,329,1,0,0,0,329,331,1,0,0,0,330,332,5,53,0,0,331,
        330,1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,334,5,49,0,0,334,
        51,1,0,0,0,335,339,5,48,0,0,336,338,3,54,27,0,337,336,1,0,0,0,338,
        341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,0,341,
        339,1,0,0,0,342,343,5,49,0,0,343,53,1,0,0,0,344,345,3,56,28,0,345,
        346,5,52,0,0,346,349,1,0,0,0,347,349,3,62,31,0,348,344,1,0,0,0,348,
        347,1,0,0,0,349,55,1,0,0,0,350,351,5,34,0,0,351,352,3,58,29,0,352,
        353,5,55,0,0,353,354,3,80,40,0,354,364,1,0,0,0,355,356,3,116,58,
        0,356,357,3,14,7,0,357,358,5,55,0,0,358,359,3,80,40,0,359,364,1,
        0,0,0,360,361,3,116,58,0,361,362,3,14,7,0,362,364,1,0,0,0,363,350,
        1,0,0,0,363,355,1,0,0,0,363,360,1,0,0,0,364,57,1,0,0,0,365,366,7,
        1,0,0,366,59,1,0,0,0,367,368,5,93,0,0,368,61,1,0,0,0,369,447,3,52,
        26,0,370,447,3,2,1,0,371,372,5,20,0,0,372,373,3,74,37,0,373,376,
        3,62,31,0,374,375,5,17,0,0,375,377,3,62,31,0,376,374,1,0,0,0,376,
        377,1,0,0,0,377,447,1,0,0,0,378,379,5,19,0,0,379,380,5,46,0,0,380,
        381,3,68,34,0,381,382,5,47,0,0,382,383,3,62,31,0,383,447,1,0,0,0,
        384,385,5,31,0,0,385,386,3,74,37,0,386,387,3,62,31,0,387,447,1,0,
        0,0,388,389,5,15,0,0,389,390,3,62,31,0,390,391,5,31,0,0,391,392,
        3,74,37,0,392,393,5,52,0,0,393,447,1,0,0,0,394,395,5,29,0,0,395,
        396,3,74,37,0,396,400,5,48,0,0,397,399,3,64,32,0,398,397,1,0,0,0,
        399,402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,406,1,0,0,0,
        402,400,1,0,0,0,403,405,3,66,33,0,404,403,1,0,0,0,405,408,1,0,0,
        0,406,404,1,0,0,0,406,407,1,0,0,0,407,409,1,0,0,0,408,406,1,0,0,
        0,409,410,5,49,0,0,410,447,1,0,0,0,411,413,5,26,0,0,412,414,3,80,
        40,0,413,412,1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,447,5,52,
        0,0,416,418,5,8,0,0,417,419,3,58,29,0,418,417,1,0,0,0,418,419,1,
        0,0,0,419,420,1,0,0,0,420,447,5,52,0,0,421,423,5,13,0,0,422,424,
        3,58,29,0,423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,447,
        5,52,0,0,426,427,3,80,40,0,427,428,5,52,0,0,428,447,1,0,0,0,429,
        431,3,96,48,0,430,432,5,52,0,0,431,430,1,0,0,0,431,432,1,0,0,0,432,
        447,1,0,0,0,433,434,3,58,29,0,434,435,5,61,0,0,435,436,3,62,31,0,
        436,447,1,0,0,0,437,438,5,19,0,0,438,439,5,46,0,0,439,440,3,10,5,
        0,440,441,5,93,0,0,441,442,5,32,0,0,442,443,3,80,40,0,443,444,5,
        47,0,0,444,445,3,62,31,0,445,447,1,0,0,0,446,369,1,0,0,0,446,370,
        1,0,0,0,446,371,1,0,0,0,446,378,1,0,0,0,446,384,1,0,0,0,446,388,
        1,0,0,0,446,394,1,0,0,0,446,411,1,0,0,0,446,416,1,0,0,0,446,421,
        1,0,0,0,446,426,1,0,0,0,446,429,1,0,0,0,446,433,1,0,0,0,446,437,
        1,0,0,0,447,63,1,0,0,0,448,450,3,66,33,0,449,448,1,0,0,0,450,451,
        1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,454,1,0,0,0,453,455,
        3,54,27,0,454,453,1,0,0,0,455,456,1,0,0,0,456,454,1,0,0,0,456,457,
        1,0,0,0,457,65,1,0,0,0,458,463,5,10,0,0,459,464,3,80,40,0,460,461,
        3,116,58,0,461,462,3,58,29,0,462,464,1,0,0,0,463,459,1,0,0,0,463,
        460,1,0,0,0,464,465,1,0,0,0,465,466,5,61,0,0,466,470,1,0,0,0,467,
        468,5,14,0,0,468,470,5,61,0,0,469,458,1,0,0,0,469,467,1,0,0,0,470,
        67,1,0,0,0,471,484,3,72,36,0,472,474,3,70,35,0,473,472,1,0,0,0,473,
        474,1,0,0,0,474,475,1,0,0,0,475,477,5,52,0,0,476,478,3,80,40,0,477,
        476,1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,481,5,52,0,0,480,
        482,3,76,38,0,481,480,1,0,0,0,481,482,1,0,0,0,482,484,1,0,0,0,483,
        471,1,0,0,0,483,473,1,0,0,0,484,69,1,0,0,0,485,488,3,56,28,0,486,
        488,3,76,38,0,487,485,1,0,0,0,487,486,1,0,0,0,488,71,1,0,0,0,489,
        492,3,116,58,0,490,492,5,34,0,0,491,489,1,0,0,0,491,490,1,0,0,0,
        492,493,1,0,0,0,493,494,3,18,9,0,494,495,5,61,0,0,495,496,3,80,40,
        0,496,73,1,0,0,0,497,498,5,46,0,0,498,499,3,80,40,0,499,500,5,47,
        0,0,500,75,1,0,0,0,501,506,3,80,40,0,502,503,5,53,0,0,503,505,3,
        80,40,0,504,502,1,0,0,0,505,508,1,0,0,0,506,504,1,0,0,0,506,507,
        1,0,0,0,507,77,1,0,0,0,508,506,1,0,0,0,509,510,3,58,29,0,510,511,
        3,110,55,0,511,79,1,0,0,0,512,513,6,40,-1,0,513,526,3,94,47,0,514,
        526,3,78,39,0,515,517,3,116,58,0,516,518,3,108,54,0,517,516,1,0,
        0,0,517,518,1,0,0,0,518,519,1,0,0,0,519,520,3,58,29,0,520,526,1,
        0,0,0,521,526,3,96,48,0,522,523,7,2,0,0,523,526,3,80,40,17,524,526,
        3,84,42,0,525,512,1,0,0,0,525,514,1,0,0,0,525,515,1,0,0,0,525,521,
        1,0,0,0,525,522,1,0,0,0,525,524,1,0,0,0,526,606,1,0,0,0,527,528,
        10,16,0,0,528,529,7,3,0,0,529,605,3,80,40,17,530,531,10,15,0,0,531,
        532,7,4,0,0,532,605,3,80,40,16,533,541,10,14,0,0,534,535,5,57,0,
        0,535,542,5,57,0,0,536,537,5,56,0,0,537,538,5,56,0,0,538,542,5,56,
        0,0,539,540,5,56,0,0,540,542,5,56,0,0,541,534,1,0,0,0,541,536,1,
        0,0,0,541,539,1,0,0,0,542,543,1,0,0,0,543,605,3,80,40,15,544,545,
        10,13,0,0,545,546,7,5,0,0,546,605,3,80,40,14,547,548,10,11,0,0,548,
        549,7,6,0,0,549,605,3,80,40,12,550,551,10,10,0,0,551,552,5,74,0,
        0,552,605,3,80,40,11,553,554,10,9,0,0,554,555,5,76,0,0,555,605,3,
        80,40,10,556,557,10,8,0,0,557,558,5,75,0,0,558,605,3,80,40,9,559,
        560,10,7,0,0,560,561,5,3,0,0,561,605,3,80,40,8,562,563,10,6,0,0,
        563,564,5,4,0,0,564,605,3,80,40,7,565,566,10,5,0,0,566,567,5,5,0,
        0,567,605,3,80,40,6,568,569,10,4,0,0,569,570,5,6,0,0,570,605,3,80,
        40,5,571,572,10,3,0,0,572,573,5,60,0,0,573,574,3,80,40,0,574,575,
        5,61,0,0,575,576,3,80,40,3,576,605,1,0,0,0,577,578,10,2,0,0,578,
        579,7,7,0,0,579,605,3,80,40,2,580,581,10,24,0,0,581,582,5,50,0,0,
        582,583,3,80,40,0,583,584,5,51,0,0,584,605,1,0,0,0,585,586,10,23,
        0,0,586,589,5,54,0,0,587,590,3,58,29,0,588,590,3,78,39,0,589,587,
        1,0,0,0,589,588,1,0,0,0,590,605,1,0,0,0,591,593,10,21,0,0,592,594,
        3,108,54,0,593,592,1,0,0,0,593,594,1,0,0,0,594,595,1,0,0,0,595,605,
        3,58,29,0,596,597,10,18,0,0,597,605,7,8,0,0,598,599,10,12,0,0,599,
        602,5,23,0,0,600,603,3,116,58,0,601,603,3,92,46,0,602,600,1,0,0,
        0,602,601,1,0,0,0,603,605,1,0,0,0,604,527,1,0,0,0,604,530,1,0,0,
        0,604,533,1,0,0,0,604,544,1,0,0,0,604,547,1,0,0,0,604,550,1,0,0,
        0,604,553,1,0,0,0,604,556,1,0,0,0,604,559,1,0,0,0,604,562,1,0,0,
        0,604,565,1,0,0,0,604,568,1,0,0,0,604,571,1,0,0,0,604,577,1,0,0,
        0,604,580,1,0,0,0,604,585,1,0,0,0,604,591,1,0,0,0,604,596,1,0,0,
        0,604,598,1,0,0,0,605,608,1,0,0,0,606,604,1,0,0,0,606,607,1,0,0,
        0,607,81,1,0,0,0,608,606,1,0,0,0,609,632,3,58,29,0,610,612,5,46,
        0,0,611,613,3,30,15,0,612,611,1,0,0,0,612,613,1,0,0,0,613,614,1,
        0,0,0,614,632,5,47,0,0,615,616,5,46,0,0,616,621,3,58,29,0,617,618,
        5,53,0,0,618,620,3,58,29,0,619,617,1,0,0,0,620,623,1,0,0,0,621,619,
        1,0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,621,1,0,0,0,624,625,
        5,47,0,0,625,632,1,0,0,0,626,628,5,46,0,0,627,629,3,88,44,0,628,
        627,1,0,0,0,628,629,1,0,0,0,629,630,1,0,0,0,630,632,5,47,0,0,631,
        609,1,0,0,0,631,610,1,0,0,0,631,615,1,0,0,0,631,626,1,0,0,0,632,
        83,1,0,0,0,633,634,3,82,41,0,634,635,5,89,0,0,635,636,3,86,43,0,
        636,85,1,0,0,0,637,640,3,80,40,0,638,640,3,52,26,0,639,637,1,0,0,
        0,639,638,1,0,0,0,640,87,1,0,0,0,641,646,3,90,45,0,642,643,5,53,
        0,0,643,645,3,90,45,0,644,642,1,0,0,0,645,648,1,0,0,0,646,644,1,
        0,0,0,646,647,1,0,0,0,647,89,1,0,0,0,648,646,1,0,0,0,649,650,5,34,
        0,0,650,651,3,58,29,0,651,91,1,0,0,0,652,653,3,116,58,0,653,654,
        3,58,29,0,654,93,1,0,0,0,655,656,5,46,0,0,656,657,3,80,40,0,657,
        658,5,47,0,0,658,662,1,0,0,0,659,662,3,38,19,0,660,662,3,58,29,0,
        661,655,1,0,0,0,661,659,1,0,0,0,661,660,1,0,0,0,662,95,1,0,0,0,663,
        664,5,29,0,0,664,665,3,74,37,0,665,669,5,48,0,0,666,668,3,98,49,
        0,667,666,1,0,0,0,668,671,1,0,0,0,669,667,1,0,0,0,669,670,1,0,0,
        0,670,672,1,0,0,0,671,669,1,0,0,0,672,673,5,49,0,0,673,97,1,0,0,
        0,674,678,5,10,0,0,675,679,3,76,38,0,676,679,5,45,0,0,677,679,3,
        100,50,0,678,675,1,0,0,0,678,676,1,0,0,0,678,677,1,0,0,0,679,680,
        1,0,0,0,680,681,7,9,0,0,681,686,3,102,51,0,682,683,5,14,0,0,683,
        684,7,9,0,0,684,686,3,102,51,0,685,674,1,0,0,0,685,682,1,0,0,0,686,
        99,1,0,0,0,687,688,6,50,-1,0,688,689,5,46,0,0,689,690,3,100,50,0,
        690,691,5,47,0,0,691,702,1,0,0,0,692,693,3,116,58,0,693,698,3,58,
        29,0,694,695,5,3,0,0,695,697,3,80,40,0,696,694,1,0,0,0,697,700,1,
        0,0,0,698,696,1,0,0,0,698,699,1,0,0,0,699,702,1,0,0,0,700,698,1,
        0,0,0,701,687,1,0,0,0,701,692,1,0,0,0,702,708,1,0,0,0,703,704,10,
        1,0,0,704,705,5,3,0,0,705,707,3,80,40,0,706,703,1,0,0,0,707,710,
        1,0,0,0,708,706,1,0,0,0,708,709,1,0,0,0,709,101,1,0,0,0,710,708,
        1,0,0,0,711,719,3,52,26,0,712,714,3,54,27,0,713,712,1,0,0,0,714,
        717,1,0,0,0,715,713,1,0,0,0,715,716,1,0,0,0,716,719,1,0,0,0,717,
        715,1,0,0,0,718,711,1,0,0,0,718,715,1,0,0,0,719,103,1,0,0,0,720,
        721,5,50,0,0,721,723,5,51,0,0,722,720,1,0,0,0,723,724,1,0,0,0,724,
        722,1,0,0,0,724,725,1,0,0,0,725,726,1,0,0,0,726,743,3,22,11,0,727,
        728,5,50,0,0,728,729,3,80,40,0,729,730,5,51,0,0,730,732,1,0,0,0,
        731,727,1,0,0,0,732,733,1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,0,
        734,739,1,0,0,0,735,736,5,50,0,0,736,738,5,51,0,0,737,735,1,0,0,
        0,738,741,1,0,0,0,739,737,1,0,0,0,739,740,1,0,0,0,740,743,1,0,0,
        0,741,739,1,0,0,0,742,722,1,0,0,0,742,731,1,0,0,0,743,105,1,0,0,
        0,744,745,7,10,0,0,745,107,1,0,0,0,746,747,5,57,0,0,747,752,3,112,
        56,0,748,749,5,53,0,0,749,751,3,112,56,0,750,748,1,0,0,0,751,754,
        1,0,0,0,752,750,1,0,0,0,752,753,1,0,0,0,753,755,1,0,0,0,754,752,
        1,0,0,0,755,756,5,56,0,0,756,109,1,0,0,0,757,759,5,46,0,0,758,760,
        3,76,38,0,759,758,1,0,0,0,759,760,1,0,0,0,760,761,1,0,0,0,761,762,
        5,47,0,0,762,111,1,0,0,0,763,764,3,116,58,0,764,113,1,0,0,0,765,
        770,3,116,58,0,766,767,5,53,0,0,767,769,3,116,58,0,768,766,1,0,0,
        0,769,772,1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,0,771,115,1,0,0,
        0,772,770,1,0,0,0,773,778,3,106,53,0,774,775,5,50,0,0,775,777,5,
        51,0,0,776,774,1,0,0,0,777,780,1,0,0,0,778,776,1,0,0,0,778,779,1,
        0,0,0,779,117,1,0,0,0,780,778,1,0,0,0,86,121,132,139,146,152,159,
        169,173,177,181,192,198,205,210,218,222,224,233,238,243,246,248,
        258,266,271,274,288,297,308,317,325,328,331,339,348,363,376,400,
        406,413,418,423,431,446,451,456,463,469,473,477,481,483,487,491,
        506,517,525,541,589,593,602,604,606,612,621,628,631,639,646,661,
        669,678,685,698,701,708,715,718,724,733,739,742,752,759,770,778
    ]

class JayPyGrammarParser ( Parser ):

    grammarFileName = "JayPyGrammar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'main'", "'...'", "'&&'", "'||'", "'OR'", 
                     "'AND'", "'boolean'", "'break'", "'byte'", "'case'", 
                     "'char'", "'const'", "'continue'", "'default'", "'do'", 
                     "'double'", "'else'", "'float'", "'for'", "'if'", "'goto'", 
                     "'import'", "'instanceof'", "'int'", "'long'", "'return'", 
                     "'short'", "'static'", "'switch'", "'void'", "'while'", 
                     "'in'", "'String'", "'var'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
                     "';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", "'~'", 
                     "'?'", "':'", "'=='", "'<='", "'>='", "'!='", "<INVALID>", 
                     "<INVALID>", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", 
                     "'&'", "'|'", "'^'", "'%'", "'+='", "'-='", "'*='", 
                     "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", 
                     "'>>>='", "'->'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "BOOLEAN", 
                      "BREAK", "BYTE", "CASE", "CHAR", "CONST", "CONTINUE", 
                      "DEFAULT", "DO", "DOUBLE", "ELSE", "FLOAT", "FOR", 
                      "IF", "GOTO", "IMPORT", "INSTANCEOF", "INT", "LONG", 
                      "RETURN", "SHORT", "STATIC", "SWITCH", "VOID", "WHILE", 
                      "IN", "STRING", "VAR", "DECIMAL_LITERAL_FOR_ARRAY", 
                      "DECIMAL_LITERAL", "HEX_LITERAL", "BINARY_LITERAL", 
                      "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", "BOOL_LITERAL", 
                      "CHAR_LITERAL", "STRING_LITERAL", "INTEGER_LITERAL", 
                      "NULL_LITERAL", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                      "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", 
                      "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", 
                      "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", 
                      "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", 
                      "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
                      "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
                      "ARROW", "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER" ]

    RULE_program = 0
    RULE_memberDeclaration = 1
    RULE_methodDeclaration = 2
    RULE_methodBody = 3
    RULE_typeTypeOrVoid = 4
    RULE_typeTypeOrVar = 5
    RULE_fieldDeclaration = 6
    RULE_variableDeclarators = 7
    RULE_variableDeclarator = 8
    RULE_variableDeclaratorId = 9
    RULE_variableInitializer = 10
    RULE_arrayInitializer = 11
    RULE_qualifiedNameList = 12
    RULE_formalParameters = 13
    RULE_receiverParameter = 14
    RULE_formalParameterList = 15
    RULE_formalParameter = 16
    RULE_lastFormalParameter = 17
    RULE_qualifiedName = 18
    RULE_literal = 19
    RULE_integerLiteral = 20
    RULE_floatLiteral = 21
    RULE_elementValuePairs = 22
    RULE_elementValuePair = 23
    RULE_elementValue = 24
    RULE_elementValueArrayInitializer = 25
    RULE_block = 26
    RULE_blockStatement = 27
    RULE_localVariableDeclaration = 28
    RULE_identifier = 29
    RULE_typeIdentifier = 30
    RULE_statement = 31
    RULE_switchBlockStatementGroup = 32
    RULE_switchLabel = 33
    RULE_forControl = 34
    RULE_forInit = 35
    RULE_enhancedForControl = 36
    RULE_parExpression = 37
    RULE_expressionList = 38
    RULE_methodCall = 39
    RULE_expression = 40
    RULE_lambdaParameters = 41
    RULE_lambdaExpression = 42
    RULE_lambdaBody = 43
    RULE_lambdaLVTIList = 44
    RULE_lambdaLVTIParameter = 45
    RULE_pattern = 46
    RULE_primary = 47
    RULE_switchExpression = 48
    RULE_switchLabeledRule = 49
    RULE_guardedPattern = 50
    RULE_switchRuleOutcome = 51
    RULE_arrayCreatorRest = 52
    RULE_primitiveType = 53
    RULE_typeArguments = 54
    RULE_arguments = 55
    RULE_typeArgument = 56
    RULE_typeList = 57
    RULE_typeType = 58

    ruleNames =  [ "program", "memberDeclaration", "methodDeclaration", 
                   "methodBody", "typeTypeOrVoid", "typeTypeOrVar", "fieldDeclaration", 
                   "variableDeclarators", "variableDeclarator", "variableDeclaratorId", 
                   "variableInitializer", "arrayInitializer", "qualifiedNameList", 
                   "formalParameters", "receiverParameter", "formalParameterList", 
                   "formalParameter", "lastFormalParameter", "qualifiedName", 
                   "literal", "integerLiteral", "floatLiteral", "elementValuePairs", 
                   "elementValuePair", "elementValue", "elementValueArrayInitializer", 
                   "block", "blockStatement", "localVariableDeclaration", 
                   "identifier", "typeIdentifier", "statement", "switchBlockStatementGroup", 
                   "switchLabel", "forControl", "forInit", "enhancedForControl", 
                   "parExpression", "expressionList", "methodCall", "expression", 
                   "lambdaParameters", "lambdaExpression", "lambdaBody", 
                   "lambdaLVTIList", "lambdaLVTIParameter", "pattern", "primary", 
                   "switchExpression", "switchLabeledRule", "guardedPattern", 
                   "switchRuleOutcome", "arrayCreatorRest", "primitiveType", 
                   "typeArguments", "arguments", "typeArgument", "typeList", 
                   "typeType" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    BOOLEAN=7
    BREAK=8
    BYTE=9
    CASE=10
    CHAR=11
    CONST=12
    CONTINUE=13
    DEFAULT=14
    DO=15
    DOUBLE=16
    ELSE=17
    FLOAT=18
    FOR=19
    IF=20
    GOTO=21
    IMPORT=22
    INSTANCEOF=23
    INT=24
    LONG=25
    RETURN=26
    SHORT=27
    STATIC=28
    SWITCH=29
    VOID=30
    WHILE=31
    IN=32
    STRING=33
    VAR=34
    DECIMAL_LITERAL_FOR_ARRAY=35
    DECIMAL_LITERAL=36
    HEX_LITERAL=37
    BINARY_LITERAL=38
    FLOAT_LITERAL=39
    HEX_FLOAT_LITERAL=40
    BOOL_LITERAL=41
    CHAR_LITERAL=42
    STRING_LITERAL=43
    INTEGER_LITERAL=44
    NULL_LITERAL=45
    LPAREN=46
    RPAREN=47
    LBRACE=48
    RBRACE=49
    LBRACK=50
    RBRACK=51
    SEMI=52
    COMMA=53
    DOT=54
    ASSIGN=55
    GT=56
    LT=57
    BANG=58
    TILDE=59
    QUESTION=60
    COLON=61
    EQUAL=62
    LE=63
    GE=64
    NOTEQUAL=65
    AND=66
    OR=67
    INC=68
    DEC=69
    ADD=70
    SUB=71
    MUL=72
    DIV=73
    BITAND=74
    BITOR=75
    CARET=76
    MOD=77
    ADD_ASSIGN=78
    SUB_ASSIGN=79
    MUL_ASSIGN=80
    DIV_ASSIGN=81
    AND_ASSIGN=82
    OR_ASSIGN=83
    XOR_ASSIGN=84
    MOD_ASSIGN=85
    LSHIFT_ASSIGN=86
    RSHIFT_ASSIGN=87
    URSHIFT_ASSIGN=88
    ARROW=89
    WS=90
    COMMENT=91
    LINE_COMMENT=92
    IDENTIFIER=93

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(JayPyGrammarParser.INT, 0)

        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def LBRACE(self):
            return self.getToken(JayPyGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JayPyGrammarParser.RBRACE, 0)

        def EOF(self):
            return self.getToken(JayPyGrammarParser.EOF, 0)

        def methodDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.MethodDeclarationContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.MethodDeclarationContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.StatementContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.StatementContext,i)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = JayPyGrammarParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 121
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 118
                    self.methodDeclaration() 
                self.state = 123
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 124
            self.match(JayPyGrammarParser.INT)
            self.state = 125
            self.match(JayPyGrammarParser.T__0)
            self.state = 126
            self.match(JayPyGrammarParser.LPAREN)
            self.state = 127
            self.match(JayPyGrammarParser.RPAREN)
            self.state = 128
            self.match(JayPyGrammarParser.LBRACE)
            self.state = 132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 865111790153739136) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 33554447) != 0):
                self.state = 129
                self.statement()
                self.state = 134
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 135
            self.match(JayPyGrammarParser.RBRACE)
            self.state = 139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9848556160) != 0):
                self.state = 136
                self.methodDeclaration()
                self.state = 141
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 142
            self.match(JayPyGrammarParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodDeclaration(self):
            return self.getTypedRuleContext(JayPyGrammarParser.MethodDeclarationContext,0)


        def fieldDeclaration(self):
            return self.getTypedRuleContext(JayPyGrammarParser.FieldDeclarationContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_memberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration" ):
                listener.enterMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration" ):
                listener.exitMemberDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclaration" ):
                return visitor.visitMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def memberDeclaration(self):

        localctx = JayPyGrammarParser.MemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_memberDeclaration)
        try:
            self.state = 146
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 144
                self.methodDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 145
                self.fieldDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeOrVoidContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def methodBody(self):
            return self.getTypedRuleContext(JayPyGrammarParser.MethodBodyContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JayPyGrammarParser.FormalParametersContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.LBRACK)
            else:
                return self.getToken(JayPyGrammarParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.RBRACK)
            else:
                return self.getToken(JayPyGrammarParser.RBRACK, i)

        def VOID(self):
            return self.getToken(JayPyGrammarParser.VOID, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodDeclaration" ):
                return visitor.visitMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def methodDeclaration(self):

        localctx = JayPyGrammarParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 148
                self.typeTypeOrVoid()
                self.state = 149
                self.identifier()
                self.state = 150
                self.match(JayPyGrammarParser.LPAREN)
                self.state = 152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 151
                    self.formalParameters()


                self.state = 154
                self.match(JayPyGrammarParser.RPAREN)
                self.state = 159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==50:
                    self.state = 155
                    self.match(JayPyGrammarParser.LBRACK)
                    self.state = 156
                    self.match(JayPyGrammarParser.RBRACK)
                    self.state = 161
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 162
                self.methodBody()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 164
                self.match(JayPyGrammarParser.VOID)
                self.state = 165
                self.identifier()
                self.state = 166
                self.formalParameters()
                self.state = 167
                self.methodBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JayPyGrammarParser.BlockContext,0)


        def SEMI(self):
            return self.getToken(JayPyGrammarParser.SEMI, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodBody" ):
                return visitor.visitMethodBody(self)
            else:
                return visitor.visitChildren(self)




    def methodBody(self):

        localctx = JayPyGrammarParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_methodBody)
        try:
            self.state = 173
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 171
                self.block()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 172
                self.match(JayPyGrammarParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeOrVoidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def VOID(self):
            return self.getToken(JayPyGrammarParser.VOID, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_typeTypeOrVoid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTypeOrVoid" ):
                listener.enterTypeTypeOrVoid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTypeOrVoid" ):
                listener.exitTypeTypeOrVoid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeTypeOrVoid" ):
                return visitor.visitTypeTypeOrVoid(self)
            else:
                return visitor.visitChildren(self)




    def typeTypeOrVoid(self):

        localctx = JayPyGrammarParser.TypeTypeOrVoidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_typeTypeOrVoid)
        try:
            self.state = 177
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 175
                self.typeType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 176
                self.match(JayPyGrammarParser.VOID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeOrVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def VAR(self):
            return self.getToken(JayPyGrammarParser.VAR, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_typeTypeOrVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTypeOrVar" ):
                listener.enterTypeTypeOrVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTypeOrVar" ):
                listener.exitTypeTypeOrVar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeTypeOrVar" ):
                return visitor.visitTypeTypeOrVar(self)
            else:
                return visitor.visitChildren(self)




    def typeTypeOrVar(self):

        localctx = JayPyGrammarParser.TypeTypeOrVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_typeTypeOrVar)
        try:
            self.state = 181
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 9, 11, 16, 18, 24, 25, 27, 30, 33]:
                self.enterOuterAlt(localctx, 1)
                self.state = 179
                self.typeType()
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 180
                self.match(JayPyGrammarParser.VAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JayPyGrammarParser.VariableDeclaratorsContext,0)


        def SEMI(self):
            return self.getToken(JayPyGrammarParser.SEMI, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDeclaration" ):
                return visitor.visitFieldDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def fieldDeclaration(self):

        localctx = JayPyGrammarParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_fieldDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 183
            self.typeType()
            self.state = 184
            self.variableDeclarators()
            self.state = 185
            self.match(JayPyGrammarParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.VariableDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_variableDeclarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarators" ):
                listener.enterVariableDeclarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarators" ):
                listener.exitVariableDeclarators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarators" ):
                return visitor.visitVariableDeclarators(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarators(self):

        localctx = JayPyGrammarParser.VariableDeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_variableDeclarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self.variableDeclarator()
            self.state = 192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==53:
                self.state = 188
                self.match(JayPyGrammarParser.COMMA)
                self.state = 189
                self.variableDeclarator()
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JayPyGrammarParser.VariableDeclaratorIdContext,0)


        def ASSIGN(self):
            return self.getToken(JayPyGrammarParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JayPyGrammarParser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_variableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarator" ):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarator" ):
                listener.exitVariableDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarator" ):
                return visitor.visitVariableDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarator(self):

        localctx = JayPyGrammarParser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_variableDeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.variableDeclaratorId()
            self.state = 198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 196
                self.match(JayPyGrammarParser.ASSIGN)
                self.state = 197
                self.variableInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.LBRACK)
            else:
                return self.getToken(JayPyGrammarParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.RBRACK)
            else:
                return self.getToken(JayPyGrammarParser.RBRACK, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_variableDeclaratorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorId" ):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorId" ):
                listener.exitVariableDeclaratorId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaratorId" ):
                return visitor.visitVariableDeclaratorId(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaratorId(self):

        localctx = JayPyGrammarParser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_variableDeclaratorId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 200
            self.identifier()
            self.state = 205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==50:
                self.state = 201
                self.match(JayPyGrammarParser.LBRACK)
                self.state = 202
                self.match(JayPyGrammarParser.RBRACK)
                self.state = 207
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ArrayInitializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableInitializer" ):
                return visitor.visitVariableInitializer(self)
            else:
                return visitor.visitChildren(self)




    def variableInitializer(self):

        localctx = JayPyGrammarParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_variableInitializer)
        try:
            self.state = 210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 208
                self.arrayInitializer()
                pass
            elif token in [7, 9, 11, 16, 18, 24, 25, 27, 29, 30, 33, 34, 36, 39, 41, 42, 43, 44, 45, 46, 58, 59, 68, 69, 70, 71, 93]:
                self.enterOuterAlt(localctx, 2)
                self.state = 209
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JayPyGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JayPyGrammarParser.RBRACE, 0)

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.VariableInitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayInitializer" ):
                return visitor.visitArrayInitializer(self)
            else:
                return visitor.visitChildren(self)




    def arrayInitializer(self):

        localctx = JayPyGrammarParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            self.match(JayPyGrammarParser.LBRACE)
            self.state = 224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 865111787937532544) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 33554447) != 0):
                self.state = 213
                self.variableInitializer()
                self.state = 218
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 214
                        self.match(JayPyGrammarParser.COMMA)
                        self.state = 215
                        self.variableInitializer() 
                    self.state = 220
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 221
                    self.match(JayPyGrammarParser.COMMA)




            self.state = 226
            self.match(JayPyGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.QualifiedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedNameList" ):
                return visitor.visitQualifiedNameList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedNameList(self):

        localctx = JayPyGrammarParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.qualifiedName()
            self.state = 233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==53:
                self.state = 229
                self.match(JayPyGrammarParser.COMMA)
                self.state = 230
                self.qualifiedName()
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def receiverParameter(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ReceiverParameterContext,0)


        def COMMA(self):
            return self.getToken(JayPyGrammarParser.COMMA, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JayPyGrammarParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_formalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameters" ):
                listener.enterFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameters" ):
                listener.exitFormalParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameters" ):
                return visitor.visitFormalParameters(self)
            else:
                return visitor.visitChildren(self)




    def formalParameters(self):

        localctx = JayPyGrammarParser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_formalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(JayPyGrammarParser.LPAREN)
            self.state = 248
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9848556160) != 0):
                    self.state = 237
                    self.receiverParameter()


                pass

            elif la_ == 2:
                self.state = 240
                self.receiverParameter()
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 241
                    self.match(JayPyGrammarParser.COMMA)
                    self.state = 242
                    self.formalParameterList()


                pass

            elif la_ == 3:
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9848556160) != 0):
                    self.state = 245
                    self.formalParameterList()


                pass


            self.state = 250
            self.match(JayPyGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.DOT)
            else:
                return self.getToken(JayPyGrammarParser.DOT, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_receiverParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiverParameter" ):
                listener.enterReceiverParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiverParameter" ):
                listener.exitReceiverParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiverParameter" ):
                return visitor.visitReceiverParameter(self)
            else:
                return visitor.visitChildren(self)




    def receiverParameter(self):

        localctx = JayPyGrammarParser.ReceiverParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_receiverParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.typeType()
            self.state = 258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34 or _la==93:
                self.state = 253
                self.identifier()
                self.state = 254
                self.match(JayPyGrammarParser.DOT)
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.FormalParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def lastFormalParameter(self):
            return self.getTypedRuleContext(JayPyGrammarParser.LastFormalParameterContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameterList" ):
                return visitor.visitFormalParameterList(self)
            else:
                return visitor.visitChildren(self)




    def formalParameterList(self):

        localctx = JayPyGrammarParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.state = 274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 261
                self.formalParameter()
                self.state = 266
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 262
                        self.match(JayPyGrammarParser.COMMA)
                        self.state = 263
                        self.formalParameter() 
                    self.state = 268
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 269
                    self.match(JayPyGrammarParser.COMMA)
                    self.state = 270
                    self.lastFormalParameter()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 273
                self.lastFormalParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JayPyGrammarParser.VariableDeclaratorIdContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameter" ):
                return visitor.visitFormalParameter(self)
            else:
                return visitor.visitChildren(self)




    def formalParameter(self):

        localctx = JayPyGrammarParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_formalParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.typeType()
            self.state = 277
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JayPyGrammarParser.VariableDeclaratorIdContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_lastFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastFormalParameter" ):
                listener.enterLastFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastFormalParameter" ):
                listener.exitLastFormalParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastFormalParameter" ):
                return visitor.visitLastFormalParameter(self)
            else:
                return visitor.visitChildren(self)




    def lastFormalParameter(self):

        localctx = JayPyGrammarParser.LastFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_lastFormalParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.typeType()
            self.state = 280
            self.match(JayPyGrammarParser.T__1)
            self.state = 281
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.DOT)
            else:
                return self.getToken(JayPyGrammarParser.DOT, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = JayPyGrammarParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_qualifiedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.identifier()
            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==54:
                self.state = 284
                self.match(JayPyGrammarParser.DOT)
                self.state = 285
                self.identifier()
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IntegerLiteralContext,0)


        def floatLiteral(self):
            return self.getTypedRuleContext(JayPyGrammarParser.FloatLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(JayPyGrammarParser.CHAR_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(JayPyGrammarParser.STRING_LITERAL, 0)

        def BOOL_LITERAL(self):
            return self.getToken(JayPyGrammarParser.BOOL_LITERAL, 0)

        def NULL_LITERAL(self):
            return self.getToken(JayPyGrammarParser.NULL_LITERAL, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = JayPyGrammarParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_literal)
        try:
            self.state = 297
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36, 44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 291
                self.integerLiteral()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 292
                self.floatLiteral()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 3)
                self.state = 293
                self.match(JayPyGrammarParser.CHAR_LITERAL)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 4)
                self.state = 294
                self.match(JayPyGrammarParser.STRING_LITERAL)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 5)
                self.state = 295
                self.match(JayPyGrammarParser.BOOL_LITERAL)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 6)
                self.state = 296
                self.match(JayPyGrammarParser.NULL_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_LITERAL(self):
            return self.getToken(JayPyGrammarParser.INTEGER_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(JayPyGrammarParser.DECIMAL_LITERAL, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_integerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)




    def integerLiteral(self):

        localctx = JayPyGrammarParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_integerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            _la = self._input.LA(1)
            if not(_la==36 or _la==44):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(JayPyGrammarParser.FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_floatLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatLiteral" ):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatLiteral" ):
                listener.exitFloatLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatLiteral" ):
                return visitor.visitFloatLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatLiteral(self):

        localctx = JayPyGrammarParser.FloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_floatLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self.match(JayPyGrammarParser.FLOAT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.ElementValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_elementValuePairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePairs" ):
                listener.enterElementValuePairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePairs" ):
                listener.exitElementValuePairs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValuePairs" ):
                return visitor.visitElementValuePairs(self)
            else:
                return visitor.visitChildren(self)




    def elementValuePairs(self):

        localctx = JayPyGrammarParser.ElementValuePairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_elementValuePairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.elementValuePair()
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==53:
                self.state = 304
                self.match(JayPyGrammarParser.COMMA)
                self.state = 305
                self.elementValuePair()
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JayPyGrammarParser.ASSIGN, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_elementValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePair" ):
                listener.enterElementValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePair" ):
                listener.exitElementValuePair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValuePair" ):
                return visitor.visitElementValuePair(self)
            else:
                return visitor.visitChildren(self)




    def elementValuePair(self):

        localctx = JayPyGrammarParser.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_elementValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.identifier()
            self.state = 312
            self.match(JayPyGrammarParser.ASSIGN)
            self.state = 313
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ElementValueArrayInitializerContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_elementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue" ):
                listener.enterElementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue" ):
                listener.exitElementValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValue" ):
                return visitor.visitElementValue(self)
            else:
                return visitor.visitChildren(self)




    def elementValue(self):

        localctx = JayPyGrammarParser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_elementValue)
        try:
            self.state = 317
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 9, 11, 16, 18, 24, 25, 27, 29, 30, 33, 34, 36, 39, 41, 42, 43, 44, 45, 46, 58, 59, 68, 69, 70, 71, 93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 315
                self.expression(0)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 316
                self.elementValueArrayInitializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JayPyGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JayPyGrammarParser.RBRACE, 0)

        def elementValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.ElementValueContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.ElementValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_elementValueArrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueArrayInitializer" ):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueArrayInitializer" ):
                listener.exitElementValueArrayInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValueArrayInitializer" ):
                return visitor.visitElementValueArrayInitializer(self)
            else:
                return visitor.visitChildren(self)




    def elementValueArrayInitializer(self):

        localctx = JayPyGrammarParser.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_elementValueArrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.match(JayPyGrammarParser.LBRACE)
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 865111787937532544) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 33554447) != 0):
                self.state = 320
                self.elementValue()
                self.state = 325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 321
                        self.match(JayPyGrammarParser.COMMA)
                        self.state = 322
                        self.elementValue() 
                    self.state = 327
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)



            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 330
                self.match(JayPyGrammarParser.COMMA)


            self.state = 333
            self.match(JayPyGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JayPyGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JayPyGrammarParser.RBRACE, 0)

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = JayPyGrammarParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(JayPyGrammarParser.LBRACE)
            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 865111790153739136) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 33554447) != 0):
                self.state = 336
                self.blockStatement()
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 342
            self.match(JayPyGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JayPyGrammarParser.LocalVariableDeclarationContext,0)


        def SEMI(self):
            return self.getToken(JayPyGrammarParser.SEMI, 0)

        def statement(self):
            return self.getTypedRuleContext(JayPyGrammarParser.StatementContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = JayPyGrammarParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_blockStatement)
        try:
            self.state = 348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 344
                self.localVariableDeclaration()
                self.state = 345
                self.match(JayPyGrammarParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 347
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JayPyGrammarParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JayPyGrammarParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JayPyGrammarParser.VariableDeclaratorsContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalVariableDeclaration" ):
                return visitor.visitLocalVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localVariableDeclaration(self):

        localctx = JayPyGrammarParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_localVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 350
                self.match(JayPyGrammarParser.VAR)
                self.state = 351
                self.identifier()
                self.state = 352
                self.match(JayPyGrammarParser.ASSIGN)
                self.state = 353
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 355
                self.typeType()
                self.state = 356
                self.variableDeclarators()
                self.state = 357
                self.match(JayPyGrammarParser.ASSIGN)
                self.state = 358
                self.expression(0)
                pass

            elif la_ == 3:
                self.state = 360
                self.typeType()
                self.state = 361
                self.variableDeclarators()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JayPyGrammarParser.IDENTIFIER, 0)

        def VAR(self):
            return self.getToken(JayPyGrammarParser.VAR, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = JayPyGrammarParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            _la = self._input.LA(1)
            if not(_la==34 or _la==93):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JayPyGrammarParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_typeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIdentifier" ):
                listener.enterTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIdentifier" ):
                listener.exitTypeIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeIdentifier" ):
                return visitor.visitTypeIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def typeIdentifier(self):

        localctx = JayPyGrammarParser.TypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_typeIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.match(JayPyGrammarParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.blockLabel = None # BlockContext
            self.statementExpression = None # ExpressionContext
            self.identifierLabel = None # IdentifierContext

        def block(self):
            return self.getTypedRuleContext(JayPyGrammarParser.BlockContext,0)


        def memberDeclaration(self):
            return self.getTypedRuleContext(JayPyGrammarParser.MemberDeclarationContext,0)


        def IF(self):
            return self.getToken(JayPyGrammarParser.IF, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ParExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.StatementContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(JayPyGrammarParser.ELSE, 0)

        def FOR(self):
            return self.getToken(JayPyGrammarParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def forControl(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ForControlContext,0)


        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def WHILE(self):
            return self.getToken(JayPyGrammarParser.WHILE, 0)

        def DO(self):
            return self.getToken(JayPyGrammarParser.DO, 0)

        def SEMI(self):
            return self.getToken(JayPyGrammarParser.SEMI, 0)

        def SWITCH(self):
            return self.getToken(JayPyGrammarParser.SWITCH, 0)

        def LBRACE(self):
            return self.getToken(JayPyGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JayPyGrammarParser.RBRACE, 0)

        def switchBlockStatementGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.SwitchBlockStatementGroupContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.SwitchBlockStatementGroupContext,i)


        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.SwitchLabelContext,i)


        def RETURN(self):
            return self.getToken(JayPyGrammarParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def BREAK(self):
            return self.getToken(JayPyGrammarParser.BREAK, 0)

        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def CONTINUE(self):
            return self.getToken(JayPyGrammarParser.CONTINUE, 0)

        def switchExpression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.SwitchExpressionContext,0)


        def COLON(self):
            return self.getToken(JayPyGrammarParser.COLON, 0)

        def typeTypeOrVar(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeOrVarContext,0)


        def IDENTIFIER(self):
            return self.getToken(JayPyGrammarParser.IDENTIFIER, 0)

        def IN(self):
            return self.getToken(JayPyGrammarParser.IN, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = JayPyGrammarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 369
                localctx.blockLabel = self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 370
                self.memberDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 371
                self.match(JayPyGrammarParser.IF)
                self.state = 372
                self.parExpression()
                self.state = 373
                self.statement()
                self.state = 376
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 374
                    self.match(JayPyGrammarParser.ELSE)
                    self.state = 375
                    self.statement()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 378
                self.match(JayPyGrammarParser.FOR)
                self.state = 379
                self.match(JayPyGrammarParser.LPAREN)
                self.state = 380
                self.forControl()
                self.state = 381
                self.match(JayPyGrammarParser.RPAREN)
                self.state = 382
                self.statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 384
                self.match(JayPyGrammarParser.WHILE)
                self.state = 385
                self.parExpression()
                self.state = 386
                self.statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 388
                self.match(JayPyGrammarParser.DO)
                self.state = 389
                self.statement()
                self.state = 390
                self.match(JayPyGrammarParser.WHILE)
                self.state = 391
                self.parExpression()
                self.state = 392
                self.match(JayPyGrammarParser.SEMI)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 394
                self.match(JayPyGrammarParser.SWITCH)
                self.state = 395
                self.parExpression()
                self.state = 396
                self.match(JayPyGrammarParser.LBRACE)
                self.state = 400
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 397
                        self.switchBlockStatementGroup() 
                    self.state = 402
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==10 or _la==14:
                    self.state = 403
                    self.switchLabel()
                    self.state = 408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 409
                self.match(JayPyGrammarParser.RBRACE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 411
                self.match(JayPyGrammarParser.RETURN)
                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 864830312960821888) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 33554447) != 0):
                    self.state = 412
                    self.expression(0)


                self.state = 415
                self.match(JayPyGrammarParser.SEMI)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 416
                self.match(JayPyGrammarParser.BREAK)
                self.state = 418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34 or _la==93:
                    self.state = 417
                    self.identifier()


                self.state = 420
                self.match(JayPyGrammarParser.SEMI)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 421
                self.match(JayPyGrammarParser.CONTINUE)
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34 or _la==93:
                    self.state = 422
                    self.identifier()


                self.state = 425
                self.match(JayPyGrammarParser.SEMI)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 426
                localctx.statementExpression = self.expression(0)
                self.state = 427
                self.match(JayPyGrammarParser.SEMI)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 429
                self.switchExpression()
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 430
                    self.match(JayPyGrammarParser.SEMI)


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 433
                localctx.identifierLabel = self.identifier()
                self.state = 434
                self.match(JayPyGrammarParser.COLON)
                self.state = 435
                self.statement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 437
                self.match(JayPyGrammarParser.FOR)
                self.state = 438
                self.match(JayPyGrammarParser.LPAREN)
                self.state = 439
                self.typeTypeOrVar()
                self.state = 440
                self.match(JayPyGrammarParser.IDENTIFIER)
                self.state = 441
                self.match(JayPyGrammarParser.IN)
                self.state = 442
                self.expression(0)
                self.state = 443
                self.match(JayPyGrammarParser.RPAREN)
                self.state = 444
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockStatementGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.SwitchLabelContext,i)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_switchBlockStatementGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockStatementGroup" ):
                listener.enterSwitchBlockStatementGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockStatementGroup" ):
                listener.exitSwitchBlockStatementGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchBlockStatementGroup" ):
                return visitor.visitSwitchBlockStatementGroup(self)
            else:
                return visitor.visitChildren(self)




    def switchBlockStatementGroup(self):

        localctx = JayPyGrammarParser.SwitchBlockStatementGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_switchBlockStatementGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 448
                self.switchLabel()
                self.state = 451 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==10 or _la==14):
                    break

            self.state = 454 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 453
                self.blockStatement()
                self.state = 456 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 865111790153739136) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 33554447) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constantExpression = None # ExpressionContext
            self.varName = None # IdentifierContext

        def CASE(self):
            return self.getToken(JayPyGrammarParser.CASE, 0)

        def COLON(self):
            return self.getToken(JayPyGrammarParser.COLON, 0)

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def DEFAULT(self):
            return self.getToken(JayPyGrammarParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchLabel" ):
                return visitor.visitSwitchLabel(self)
            else:
                return visitor.visitChildren(self)




    def switchLabel(self):

        localctx = JayPyGrammarParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_switchLabel)
        try:
            self.state = 469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 458
                self.match(JayPyGrammarParser.CASE)
                self.state = 463
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 459
                    localctx.constantExpression = self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 460
                    self.typeType()
                    self.state = 461
                    localctx.varName = self.identifier()
                    pass


                self.state = 465
                self.match(JayPyGrammarParser.COLON)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 467
                self.match(JayPyGrammarParser.DEFAULT)
                self.state = 468
                self.match(JayPyGrammarParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.forUpdate = None # ExpressionListContext

        def enhancedForControl(self):
            return self.getTypedRuleContext(JayPyGrammarParser.EnhancedForControlContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.SEMI)
            else:
                return self.getToken(JayPyGrammarParser.SEMI, i)

        def forInit(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_forControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForControl" ):
                listener.enterForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForControl" ):
                listener.exitForControl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForControl" ):
                return visitor.visitForControl(self)
            else:
                return visitor.visitChildren(self)




    def forControl(self):

        localctx = JayPyGrammarParser.ForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_forControl)
        self._la = 0 # Token type
        try:
            self.state = 483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 471
                self.enhancedForControl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 864830312960821888) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 33554447) != 0):
                    self.state = 472
                    self.forInit()


                self.state = 475
                self.match(JayPyGrammarParser.SEMI)
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 864830312960821888) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 33554447) != 0):
                    self.state = 476
                    self.expression(0)


                self.state = 479
                self.match(JayPyGrammarParser.SEMI)
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 864830312960821888) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 33554447) != 0):
                    self.state = 480
                    localctx.forUpdate = self.expressionList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JayPyGrammarParser.LocalVariableDeclarationContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInit" ):
                return visitor.visitForInit(self)
            else:
                return visitor.visitChildren(self)




    def forInit(self):

        localctx = JayPyGrammarParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_forInit)
        try:
            self.state = 487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 485
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 486
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancedForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JayPyGrammarParser.VariableDeclaratorIdContext,0)


        def COLON(self):
            return self.getToken(JayPyGrammarParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def VAR(self):
            return self.getToken(JayPyGrammarParser.VAR, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_enhancedForControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForControl" ):
                listener.enterEnhancedForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForControl" ):
                listener.exitEnhancedForControl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnhancedForControl" ):
                return visitor.visitEnhancedForControl(self)
            else:
                return visitor.visitChildren(self)




    def enhancedForControl(self):

        localctx = JayPyGrammarParser.EnhancedForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_enhancedForControl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 9, 11, 16, 18, 24, 25, 27, 30, 33]:
                self.state = 489
                self.typeType()
                pass
            elif token in [34]:
                self.state = 490
                self.match(JayPyGrammarParser.VAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 493
            self.variableDeclaratorId()
            self.state = 494
            self.match(JayPyGrammarParser.COLON)
            self.state = 495
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_parExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParExpression" ):
                listener.enterParExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParExpression" ):
                listener.exitParExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParExpression" ):
                return visitor.visitParExpression(self)
            else:
                return visitor.visitChildren(self)




    def parExpression(self):

        localctx = JayPyGrammarParser.ParExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_parExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(JayPyGrammarParser.LPAREN)
            self.state = 498
            self.expression(0)
            self.state = 499
            self.match(JayPyGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = JayPyGrammarParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.expression(0)
            self.state = 506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==53:
                self.state = 502
                self.match(JayPyGrammarParser.COMMA)
                self.state = 503
                self.expression(0)
                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ArgumentsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_methodCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCall" ):
                listener.enterMethodCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCall" ):
                listener.exitMethodCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodCall" ):
                return visitor.visitMethodCall(self)
            else:
                return visitor.visitChildren(self)




    def methodCall(self):

        localctx = JayPyGrammarParser.MethodCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_methodCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.identifier()
            self.state = 510
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.prefix = None # Token
            self.bop = None # Token
            self.postfix = None # Token

        def primary(self):
            return self.getTypedRuleContext(JayPyGrammarParser.PrimaryContext,0)


        def methodCall(self):
            return self.getTypedRuleContext(JayPyGrammarParser.MethodCallContext,0)


        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeArgumentsContext,0)


        def switchExpression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.SwitchExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,i)


        def ADD(self):
            return self.getToken(JayPyGrammarParser.ADD, 0)

        def SUB(self):
            return self.getToken(JayPyGrammarParser.SUB, 0)

        def INC(self):
            return self.getToken(JayPyGrammarParser.INC, 0)

        def DEC(self):
            return self.getToken(JayPyGrammarParser.DEC, 0)

        def TILDE(self):
            return self.getToken(JayPyGrammarParser.TILDE, 0)

        def BANG(self):
            return self.getToken(JayPyGrammarParser.BANG, 0)

        def lambdaExpression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.LambdaExpressionContext,0)


        def MUL(self):
            return self.getToken(JayPyGrammarParser.MUL, 0)

        def DIV(self):
            return self.getToken(JayPyGrammarParser.DIV, 0)

        def MOD(self):
            return self.getToken(JayPyGrammarParser.MOD, 0)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.LT)
            else:
                return self.getToken(JayPyGrammarParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.GT)
            else:
                return self.getToken(JayPyGrammarParser.GT, i)

        def LE(self):
            return self.getToken(JayPyGrammarParser.LE, 0)

        def GE(self):
            return self.getToken(JayPyGrammarParser.GE, 0)

        def EQUAL(self):
            return self.getToken(JayPyGrammarParser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(JayPyGrammarParser.NOTEQUAL, 0)

        def BITAND(self):
            return self.getToken(JayPyGrammarParser.BITAND, 0)

        def CARET(self):
            return self.getToken(JayPyGrammarParser.CARET, 0)

        def BITOR(self):
            return self.getToken(JayPyGrammarParser.BITOR, 0)

        def COLON(self):
            return self.getToken(JayPyGrammarParser.COLON, 0)

        def QUESTION(self):
            return self.getToken(JayPyGrammarParser.QUESTION, 0)

        def ASSIGN(self):
            return self.getToken(JayPyGrammarParser.ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.DIV_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.XOR_ASSIGN, 0)

        def RSHIFT_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.RSHIFT_ASSIGN, 0)

        def URSHIFT_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.URSHIFT_ASSIGN, 0)

        def LSHIFT_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.LSHIFT_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(JayPyGrammarParser.MOD_ASSIGN, 0)

        def LBRACK(self):
            return self.getToken(JayPyGrammarParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(JayPyGrammarParser.RBRACK, 0)

        def DOT(self):
            return self.getToken(JayPyGrammarParser.DOT, 0)

        def INSTANCEOF(self):
            return self.getToken(JayPyGrammarParser.INSTANCEOF, 0)

        def pattern(self):
            return self.getTypedRuleContext(JayPyGrammarParser.PatternContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JayPyGrammarParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 513
                self.primary()
                pass

            elif la_ == 2:
                self.state = 514
                self.methodCall()
                pass

            elif la_ == 3:
                self.state = 515
                self.typeType()

                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 516
                    self.typeArguments()


                self.state = 519
                self.identifier()
                pass

            elif la_ == 4:
                self.state = 521
                self.switchExpression()
                pass

            elif la_ == 5:
                self.state = 522
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 15363) != 0)):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 523
                self.expression(17)
                pass

            elif la_ == 6:
                self.state = 524
                self.lambdaExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 606
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 604
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                    if la_ == 1:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 527
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 528
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 35) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 529
                        self.expression(17)
                        pass

                    elif la_ == 2:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 530
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 531
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==70 or _la==71):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 532
                        self.expression(16)
                        pass

                    elif la_ == 3:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 533
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 541
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                        if la_ == 1:
                            self.state = 534
                            self.match(JayPyGrammarParser.LT)
                            self.state = 535
                            self.match(JayPyGrammarParser.LT)
                            pass

                        elif la_ == 2:
                            self.state = 536
                            self.match(JayPyGrammarParser.GT)
                            self.state = 537
                            self.match(JayPyGrammarParser.GT)
                            self.state = 538
                            self.match(JayPyGrammarParser.GT)
                            pass

                        elif la_ == 3:
                            self.state = 539
                            self.match(JayPyGrammarParser.GT)
                            self.state = 540
                            self.match(JayPyGrammarParser.GT)
                            pass


                        self.state = 543
                        self.expression(15)
                        pass

                    elif la_ == 4:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 544
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 545
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & 387) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 546
                        self.expression(14)
                        pass

                    elif la_ == 5:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 547
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 548
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==62 or _la==65):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 549
                        self.expression(12)
                        pass

                    elif la_ == 6:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 550
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 551
                        localctx.bop = self.match(JayPyGrammarParser.BITAND)
                        self.state = 552
                        self.expression(11)
                        pass

                    elif la_ == 7:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 553
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 554
                        localctx.bop = self.match(JayPyGrammarParser.CARET)
                        self.state = 555
                        self.expression(10)
                        pass

                    elif la_ == 8:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 556
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 557
                        localctx.bop = self.match(JayPyGrammarParser.BITOR)
                        self.state = 558
                        self.expression(9)
                        pass

                    elif la_ == 9:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 559
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 560
                        localctx.bop = self.match(JayPyGrammarParser.T__2)
                        self.state = 561
                        self.expression(8)
                        pass

                    elif la_ == 10:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 562
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 563
                        localctx.bop = self.match(JayPyGrammarParser.T__3)
                        self.state = 564
                        self.expression(7)
                        pass

                    elif la_ == 11:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 565
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 566
                        localctx.bop = self.match(JayPyGrammarParser.T__4)
                        self.state = 567
                        self.expression(6)
                        pass

                    elif la_ == 12:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 568
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 569
                        localctx.bop = self.match(JayPyGrammarParser.T__5)
                        self.state = 570
                        self.expression(5)
                        pass

                    elif la_ == 13:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 571
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 572
                        localctx.bop = self.match(JayPyGrammarParser.QUESTION)
                        self.state = 573
                        self.expression(0)
                        self.state = 574
                        self.match(JayPyGrammarParser.COLON)
                        self.state = 575
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 577
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 578
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & 17171480577) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 579
                        self.expression(2)
                        pass

                    elif la_ == 15:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 580
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 581
                        self.match(JayPyGrammarParser.LBRACK)
                        self.state = 582
                        self.expression(0)
                        self.state = 583
                        self.match(JayPyGrammarParser.RBRACK)
                        pass

                    elif la_ == 16:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 585
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 586
                        localctx.bop = self.match(JayPyGrammarParser.DOT)
                        self.state = 589
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                        if la_ == 1:
                            self.state = 587
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 588
                            self.methodCall()
                            pass


                        pass

                    elif la_ == 17:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 591
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 593
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==57:
                            self.state = 592
                            self.typeArguments()


                        self.state = 595
                        self.identifier()
                        pass

                    elif la_ == 18:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 596
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 597
                        localctx.postfix = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==68 or _la==69):
                            localctx.postfix = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 19:
                        localctx = JayPyGrammarParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 598
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 599
                        localctx.bop = self.match(JayPyGrammarParser.INSTANCEOF)
                        self.state = 602
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                        if la_ == 1:
                            self.state = 600
                            self.typeType()
                            pass

                        elif la_ == 2:
                            self.state = 601
                            self.pattern()
                            pass


                        pass

             
                self.state = 608
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,i)


        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JayPyGrammarParser.FormalParameterListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def lambdaLVTIList(self):
            return self.getTypedRuleContext(JayPyGrammarParser.LambdaLVTIListContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaParameters" ):
                return visitor.visitLambdaParameters(self)
            else:
                return visitor.visitChildren(self)




    def lambdaParameters(self):

        localctx = JayPyGrammarParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.state = 631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self.match(JayPyGrammarParser.LPAREN)
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9848556160) != 0):
                    self.state = 611
                    self.formalParameterList()


                self.state = 614
                self.match(JayPyGrammarParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 615
                self.match(JayPyGrammarParser.LPAREN)
                self.state = 616
                self.identifier()
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==53:
                    self.state = 617
                    self.match(JayPyGrammarParser.COMMA)
                    self.state = 618
                    self.identifier()
                    self.state = 623
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 624
                self.match(JayPyGrammarParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 626
                self.match(JayPyGrammarParser.LPAREN)
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 627
                    self.lambdaLVTIList()


                self.state = 630
                self.match(JayPyGrammarParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameters(self):
            return self.getTypedRuleContext(JayPyGrammarParser.LambdaParametersContext,0)


        def ARROW(self):
            return self.getToken(JayPyGrammarParser.ARROW, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(JayPyGrammarParser.LambdaBodyContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_lambdaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpression" ):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpression" ):
                listener.exitLambdaExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaExpression" ):
                return visitor.visitLambdaExpression(self)
            else:
                return visitor.visitChildren(self)




    def lambdaExpression(self):

        localctx = JayPyGrammarParser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_lambdaExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.lambdaParameters()
            self.state = 634
            self.match(JayPyGrammarParser.ARROW)
            self.state = 635
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(JayPyGrammarParser.BlockContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_lambdaBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody" ):
                listener.enterLambdaBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody" ):
                listener.exitLambdaBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaBody" ):
                return visitor.visitLambdaBody(self)
            else:
                return visitor.visitChildren(self)




    def lambdaBody(self):

        localctx = JayPyGrammarParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_lambdaBody)
        try:
            self.state = 639
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 9, 11, 16, 18, 24, 25, 27, 29, 30, 33, 34, 36, 39, 41, 42, 43, 44, 45, 46, 58, 59, 68, 69, 70, 71, 93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 637
                self.expression(0)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 638
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLVTIListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaLVTIParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.LambdaLVTIParameterContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.LambdaLVTIParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_lambdaLVTIList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLVTIList" ):
                listener.enterLambdaLVTIList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLVTIList" ):
                listener.exitLambdaLVTIList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaLVTIList" ):
                return visitor.visitLambdaLVTIList(self)
            else:
                return visitor.visitChildren(self)




    def lambdaLVTIList(self):

        localctx = JayPyGrammarParser.LambdaLVTIListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_lambdaLVTIList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.lambdaLVTIParameter()
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==53:
                self.state = 642
                self.match(JayPyGrammarParser.COMMA)
                self.state = 643
                self.lambdaLVTIParameter()
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLVTIParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JayPyGrammarParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_lambdaLVTIParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLVTIParameter" ):
                listener.enterLambdaLVTIParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLVTIParameter" ):
                listener.exitLambdaLVTIParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaLVTIParameter" ):
                return visitor.visitLambdaLVTIParameter(self)
            else:
                return visitor.visitChildren(self)




    def lambdaLVTIParameter(self):

        localctx = JayPyGrammarParser.LambdaLVTIParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_lambdaLVTIParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(JayPyGrammarParser.VAR)
            self.state = 650
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = JayPyGrammarParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.typeType()
            self.state = 653
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def literal(self):
            return self.getTypedRuleContext(JayPyGrammarParser.LiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)




    def primary(self):

        localctx = JayPyGrammarParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_primary)
        try:
            self.state = 661
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 655
                self.match(JayPyGrammarParser.LPAREN)
                self.state = 656
                self.expression(0)
                self.state = 657
                self.match(JayPyGrammarParser.RPAREN)
                pass
            elif token in [36, 39, 41, 42, 43, 44, 45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                self.literal()
                pass
            elif token in [34, 93]:
                self.enterOuterAlt(localctx, 3)
                self.state = 660
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(JayPyGrammarParser.SWITCH, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ParExpressionContext,0)


        def LBRACE(self):
            return self.getToken(JayPyGrammarParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JayPyGrammarParser.RBRACE, 0)

        def switchLabeledRule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.SwitchLabeledRuleContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.SwitchLabeledRuleContext,i)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_switchExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchExpression" ):
                listener.enterSwitchExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchExpression" ):
                listener.exitSwitchExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchExpression" ):
                return visitor.visitSwitchExpression(self)
            else:
                return visitor.visitChildren(self)




    def switchExpression(self):

        localctx = JayPyGrammarParser.SwitchExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_switchExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(JayPyGrammarParser.SWITCH)
            self.state = 664
            self.parExpression()
            self.state = 665
            self.match(JayPyGrammarParser.LBRACE)
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==10 or _la==14:
                self.state = 666
                self.switchLabeledRule()
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 672
            self.match(JayPyGrammarParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabeledRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(JayPyGrammarParser.CASE, 0)

        def switchRuleOutcome(self):
            return self.getTypedRuleContext(JayPyGrammarParser.SwitchRuleOutcomeContext,0)


        def ARROW(self):
            return self.getToken(JayPyGrammarParser.ARROW, 0)

        def COLON(self):
            return self.getToken(JayPyGrammarParser.COLON, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionListContext,0)


        def NULL_LITERAL(self):
            return self.getToken(JayPyGrammarParser.NULL_LITERAL, 0)

        def guardedPattern(self):
            return self.getTypedRuleContext(JayPyGrammarParser.GuardedPatternContext,0)


        def DEFAULT(self):
            return self.getToken(JayPyGrammarParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_switchLabeledRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabeledRule" ):
                listener.enterSwitchLabeledRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabeledRule" ):
                listener.exitSwitchLabeledRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchLabeledRule" ):
                return visitor.visitSwitchLabeledRule(self)
            else:
                return visitor.visitChildren(self)




    def switchLabeledRule(self):

        localctx = JayPyGrammarParser.SwitchLabeledRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_switchLabeledRule)
        self._la = 0 # Token type
        try:
            self.state = 685
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 674
                self.match(JayPyGrammarParser.CASE)
                self.state = 678
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 675
                    self.expressionList()
                    pass

                elif la_ == 2:
                    self.state = 676
                    self.match(JayPyGrammarParser.NULL_LITERAL)
                    pass

                elif la_ == 3:
                    self.state = 677
                    self.guardedPattern(0)
                    pass


                self.state = 680
                _la = self._input.LA(1)
                if not(_la==61 or _la==89):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 681
                self.switchRuleOutcome()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 682
                self.match(JayPyGrammarParser.DEFAULT)
                self.state = 683
                _la = self._input.LA(1)
                if not(_la==61 or _la==89):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 684
                self.switchRuleOutcome()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardedPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def guardedPattern(self):
            return self.getTypedRuleContext(JayPyGrammarParser.GuardedPatternContext,0)


        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JayPyGrammarParser.IdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_guardedPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuardedPattern" ):
                listener.enterGuardedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuardedPattern" ):
                listener.exitGuardedPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuardedPattern" ):
                return visitor.visitGuardedPattern(self)
            else:
                return visitor.visitChildren(self)



    def guardedPattern(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JayPyGrammarParser.GuardedPatternContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 100
        self.enterRecursionRule(localctx, 100, self.RULE_guardedPattern, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46]:
                self.state = 688
                self.match(JayPyGrammarParser.LPAREN)
                self.state = 689
                self.guardedPattern(0)
                self.state = 690
                self.match(JayPyGrammarParser.RPAREN)
                pass
            elif token in [7, 9, 11, 16, 18, 24, 25, 27, 30, 33]:
                self.state = 692
                self.typeType()
                self.state = 693
                self.identifier()
                self.state = 698
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 694
                        self.match(JayPyGrammarParser.T__2)
                        self.state = 695
                        self.expression(0) 
                    self.state = 700
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 708
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JayPyGrammarParser.GuardedPatternContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_guardedPattern)
                    self.state = 703
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 704
                    self.match(JayPyGrammarParser.T__2)
                    self.state = 705
                    self.expression(0) 
                self.state = 710
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SwitchRuleOutcomeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JayPyGrammarParser.BlockContext,0)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_switchRuleOutcome

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchRuleOutcome" ):
                listener.enterSwitchRuleOutcome(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchRuleOutcome" ):
                listener.exitSwitchRuleOutcome(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchRuleOutcome" ):
                return visitor.visitSwitchRuleOutcome(self)
            else:
                return visitor.visitChildren(self)




    def switchRuleOutcome(self):

        localctx = JayPyGrammarParser.SwitchRuleOutcomeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_switchRuleOutcome)
        self._la = 0 # Token type
        try:
            self.state = 718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 711
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 865111790153739136) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 33554447) != 0):
                    self.state = 712
                    self.blockStatement()
                    self.state = 717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ArrayInitializerContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.LBRACK)
            else:
                return self.getToken(JayPyGrammarParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.RBRACK)
            else:
                return self.getToken(JayPyGrammarParser.RBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_arrayCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreatorRest" ):
                listener.enterArrayCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreatorRest" ):
                listener.exitArrayCreatorRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayCreatorRest" ):
                return visitor.visitArrayCreatorRest(self)
            else:
                return visitor.visitChildren(self)




    def arrayCreatorRest(self):

        localctx = JayPyGrammarParser.ArrayCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_arrayCreatorRest)
        self._la = 0 # Token type
        try:
            self.state = 742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 722 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 720
                    self.match(JayPyGrammarParser.LBRACK)
                    self.state = 721
                    self.match(JayPyGrammarParser.RBRACK)
                    self.state = 724 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==50):
                        break

                self.state = 726
                self.arrayInitializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 731 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 727
                        self.match(JayPyGrammarParser.LBRACK)
                        self.state = 728
                        self.expression(0)
                        self.state = 729
                        self.match(JayPyGrammarParser.RBRACK)

                    else:
                        raise NoViableAltException(self)
                    self.state = 733 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==50:
                    self.state = 735
                    self.match(JayPyGrammarParser.LBRACK)
                    self.state = 736
                    self.match(JayPyGrammarParser.RBRACK)
                    self.state = 741
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(JayPyGrammarParser.BOOLEAN, 0)

        def CHAR(self):
            return self.getToken(JayPyGrammarParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(JayPyGrammarParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(JayPyGrammarParser.SHORT, 0)

        def LONG(self):
            return self.getToken(JayPyGrammarParser.LONG, 0)

        def FLOAT(self):
            return self.getToken(JayPyGrammarParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(JayPyGrammarParser.DOUBLE, 0)

        def VOID(self):
            return self.getToken(JayPyGrammarParser.VOID, 0)

        def STRING(self):
            return self.getToken(JayPyGrammarParser.STRING, 0)

        def INT(self):
            return self.getToken(JayPyGrammarParser.INT, 0)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveType" ):
                return visitor.visitPrimitiveType(self)
            else:
                return visitor.visitChildren(self)




    def primitiveType(self):

        localctx = JayPyGrammarParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 9848556160) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JayPyGrammarParser.LT, 0)

        def typeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.TypeArgumentContext,i)


        def GT(self):
            return self.getToken(JayPyGrammarParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArguments" ):
                return visitor.visitTypeArguments(self)
            else:
                return visitor.visitChildren(self)




    def typeArguments(self):

        localctx = JayPyGrammarParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(JayPyGrammarParser.LT)
            self.state = 747
            self.typeArgument()
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==53:
                self.state = 748
                self.match(JayPyGrammarParser.COMMA)
                self.state = 749
                self.typeArgument()
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 755
            self.match(JayPyGrammarParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JayPyGrammarParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JayPyGrammarParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JayPyGrammarParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = JayPyGrammarParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.match(JayPyGrammarParser.LPAREN)
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 864830312960821888) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 33554447) != 0):
                self.state = 758
                self.expressionList()


            self.state = 761
            self.match(JayPyGrammarParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,0)


        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_typeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgument" ):
                listener.enterTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgument" ):
                listener.exitTypeArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArgument" ):
                return visitor.visitTypeArgument(self)
            else:
                return visitor.visitChildren(self)




    def typeArgument(self):

        localctx = JayPyGrammarParser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_typeArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.typeType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JayPyGrammarParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JayPyGrammarParser.TypeTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.COMMA)
            else:
                return self.getToken(JayPyGrammarParser.COMMA, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeList" ):
                return visitor.visitTypeList(self)
            else:
                return visitor.visitChildren(self)




    def typeList(self):

        localctx = JayPyGrammarParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.typeType()
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==53:
                self.state = 766
                self.match(JayPyGrammarParser.COMMA)
                self.state = 767
                self.typeType()
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            return self.getTypedRuleContext(JayPyGrammarParser.PrimitiveTypeContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.LBRACK)
            else:
                return self.getToken(JayPyGrammarParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JayPyGrammarParser.RBRACK)
            else:
                return self.getToken(JayPyGrammarParser.RBRACK, i)

        def getRuleIndex(self):
            return JayPyGrammarParser.RULE_typeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeType" ):
                listener.enterTypeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeType" ):
                listener.exitTypeType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeType" ):
                return visitor.visitTypeType(self)
            else:
                return visitor.visitChildren(self)




    def typeType(self):

        localctx = JayPyGrammarParser.TypeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_typeType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.primitiveType()
            self.state = 778
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 774
                    self.match(JayPyGrammarParser.LBRACK)
                    self.state = 775
                    self.match(JayPyGrammarParser.RBRACK) 
                self.state = 780
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[40] = self.expression_sempred
        self._predicates[50] = self.guardedPattern_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 12)
         

    def guardedPattern_sempred(self, localctx:GuardedPatternContext, predIndex:int):
            if predIndex == 19:
                return self.precpred(self._ctx, 1)
         




